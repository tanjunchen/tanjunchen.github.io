[{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1742688e3,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2700,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1742688e3,"objectID":"84ed1f51ef4ea6b9477c39b16106fe31","permalink":"https://tanjunchen.github.io/post/2025-03-23-h20-deepseek-r1/","publishdate":"2025-03-23T00:00:00Z","readingtime":6,"relpermalink":"/post/2025-03-23-h20-deepseek-r1/","section":"post","summary":"测试目标 测试下 DeepSeek R1（FP8） 使用单台 H20 机器在 aime、math500、gpqa (使用开源工具 evalscope) 数据集下进行精度测试； 给定输入、输出等参数，","tags":["AI","大模型","DeepSeek","NVIDIA 性能测试"],"title":"单台 H20 机器 DeepSeek R1 (FP8)、DeepSeek-R1-Block-INT8 精度测试与性能测试过程","type":"post","url":"/post/2025-03-23-h20-deepseek-r1/","weight":0,"wordcount":2623},{"author":null,"categories":["TECHNOLOGY"],"content":"介绍 NVIDIA 基础知识，如硬件类型/厂家、NVIDIA 显卡系列、SXM 与 PCIe、DeepSeek R1 资源需求示例","date":1741996800,"description":"介绍 NVIDIA 基础知识，如硬件类型/厂家、NVIDIA 显卡系列、SXM 与 PCIe、DeepSeek R1 资源需求示例","dir":"post/","excerpt_html":"介绍 NVIDIA 基础知识，如硬件类型/厂家、NVIDIA 显卡系列、SXM 与 PCIe、DeepSeek R1 资源需求示例","excerpt_text":"介绍 NVIDIA 基础知识，如硬件类型/厂家、NVIDIA 显卡系列、SXM 与 PCIe、DeepSeek R1 资源需求示例","expirydate":-62135596800,"fuzzywordcount":2400,"html":"介绍 NVIDIA 基础知识，如硬件类型/厂家、NVIDIA 显卡系列、SXM 与 PCIe、DeepSeek R1 资源需求示例","keywords":null,"kind":"page","lang":"en","lastmod":1741996800,"objectID":"9cdabf5f53d28e6023525c3e051d9d47","permalink":"https://tanjunchen.github.io/post/2025-03-15-deepseek-r1-gpu-resource/","publishdate":"2025-03-15T00:00:00Z","readingtime":5,"relpermalink":"/post/2025-03-15-deepseek-r1-gpu-resource/","section":"post","summary":"Deepseek R1 推理资源需求 量化与 FP8 动态转换： 暂不考虑量化技术； FP8 动态转换因性能损失较大，不推荐使用。因此，默认情况下，不具备 FP8 计算单元的显卡无法运行 FP8","tags":["AI","大模型","DeepSeek"],"title":"DeepSeek R1 推理 GPU 资源配置","type":"post","url":"/post/2025-03-15-deepseek-r1-gpu-resource/","weight":0,"wordcount":2393},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1741478400,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":12e3,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1741478400,"objectID":"f1e18bc8a760c6eb3038e871b7218cd2","permalink":"https://tanjunchen.github.io/post/2025-03-09-llm-deepseek-r1/","publishdate":"2025-03-09T00:00:00Z","readingtime":24,"relpermalink":"/post/2025-03-09-llm-deepseek-r1/","section":"post","summary":"1. 序言 下图展示了 OpenAI（公开文献） 从预训练开始逐步训练出一个 GPT 助手的步骤；pre-training -\u0026gt; SFT -\u0026gt; RM -\u0026gt; RL 是典型的大模型训练过程。","tags":["AI","大模型","DeepSeek"],"title":"LLM 教程（3）- 《DeepSeek R1 论文精读 - 通过强化学习推动大语言模型推理能力的突破与创新》","type":"post","url":"/post/2025-03-09-llm-deepseek-r1/","weight":0,"wordcount":11930},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1741392e3,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":14e3,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1741392e3,"objectID":"4d2606bda4903eaba7f13270ed02b225","permalink":"https://tanjunchen.github.io/post/2025-03-08-llm-learn2/","publishdate":"2025-03-08T00:00:00Z","readingtime":28,"relpermalink":"/post/2025-03-08-llm-learn2/","section":"post","summary":"LLM 专有名词 量化（Quantization） 基础知识 LLM 大模型的量化技术主要是通过对模型参数进行压缩和量化，从而降低模型的存储和计算复杂度。具体","tags":["AI","大模型","DeepSeek"],"title":"LLM 教程（2）- 大模型基础知识","type":"post","url":"/post/2025-03-08-llm-learn2/","weight":0,"wordcount":13903},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1740787200,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":5e3,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1740787200,"objectID":"3eb3c3ddb4eadc395152e5beb125fb75","permalink":"https://tanjunchen.github.io/post/2025-03-01-llm-learn1/","publishdate":"2025-03-01T00:00:00Z","readingtime":10,"relpermalink":"/post/2025-03-01-llm-learn1/","section":"post","summary":"基础知识 查看 deepseek-ai 开源官网，DeepSeek 有以下系列： DeepSeek-R1 DeepSeek-V3 （DeepSeek-V3-Base） DeepSeek-VL DeepSeek-Coder DeepSeek-Math DeepSeek-LLM 蒸馏模型系列（Qwen、LLaMA等） \u0026hellip;\u0026hellip;","tags":["AI","大模型","DeepSeek"],"title":"LLM 教程（1）- DeepSeek-R1 初步入门","type":"post","url":"/post/2025-03-01-llm-learn1/","weight":0,"wordcount":4932},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1740268800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1740268800,"objectID":"9b305048ce3e12b70e00a9a19018cc8b","permalink":"https://tanjunchen.github.io/post/2025-02-23-a800-deepseek-awq/","publishdate":"2025-02-23T00:00:00Z","readingtime":5,"relpermalink":"/post/2025-02-23-a800-deepseek-awq/","section":"post","summary":"硬件与系统环境要求 硬件配置 GPU: 8× NVIDIA A800 80GB 显存要求: 每卡80GB 系统内存: ≥32GB (用于交换空间) CPU：lscpu | grep \u0026ldquo;Model name\u0026rdquo; 值：Model name: Intel(R)","tags":["AI","大模型","DeepSeek"],"title":"A800 单机8卡体验 DeepSeek-R1-AWQ 量化满血版之旅","type":"post","url":"/post/2025-02-23-a800-deepseek-awq/","weight":0,"wordcount":2493},{"author":null,"categories":["TECHNOLOGY"],"content":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","date":1737244800,"description":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","dir":"post/","excerpt_html":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","excerpt_text":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","expirydate":-62135596800,"fuzzywordcount":3100,"html":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","keywords":null,"kind":"page","lang":"en","lastmod":1737244800,"objectID":"4a46f90ebfdaf659ab99843068e5faa0","permalink":"https://tanjunchen.github.io/post/2025-01-19-inference-serve/","publishdate":"2025-01-19T00:00:00Z","readingtime":7,"relpermalink":"/post/2025-01-19-inference-serve/","section":"post","summary":"基础概念 【分布式推理与服务】（Distributed Inference and Serving）是指在多个机器或设备之间部署和管理机器学习模型，以高效地处理推理请求","tags":["kubernetes","AI","大模型"],"title":"vLLM 多机多卡推理测试与验证（Docker）","type":"post","url":"/post/2025-01-19-inference-serve/","weight":0,"wordcount":3078},{"author":null,"categories":["TECHNOLOGY"],"content":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","date":1737244800,"description":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","dir":"post/","excerpt_html":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","excerpt_text":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","expirydate":-62135596800,"fuzzywordcount":3200,"html":"vLLM 采用多机多卡推理，是为了解决超大规模模型的显存限制、算力瓶颈、高并发吞吐需求以及长序列处理等挑战。通过模型并行、数据并行和高效的内存管理技术，vLLM 能将模型参数和计算任务分布到多块 GPU 和多台机器上，充分利用硬件资源，实现快速、高效的推理能力，满足工业级场景中对性能和扩展性的要求。","keywords":null,"kind":"page","lang":"en","lastmod":1737244800,"objectID":"da4ffe37f0713c2bfb7204bc156e2e81","permalink":"https://tanjunchen.github.io/post/2025-01-19-inference-serve-k8s/","publishdate":"2025-01-19T00:00:00Z","readingtime":7,"relpermalink":"/post/2025-01-19-inference-serve-k8s/","section":"post","summary":"基础概念 【分布式推理与服务】（Distributed Inference and Serving）是指在多个机器或设备之间部署和管理机器学习模型，以高效地处理推理请求","tags":["kubernetes","AI","大模型"],"title":"vLLM 多机多卡推理测试与验证（Kubernetes）","type":"post","url":"/post/2025-01-19-inference-serve-k8s/","weight":0,"wordcount":3186},{"author":null,"categories":["TECHNOLOGY"],"content":"本内容概述了现代计算与人工智能生态系统的关键领域，包括单机环境配置（如 CUDA、GPU 驱动）、容器与 Kubernetes 的支持（如容器运行时、设备插件）、硬件与计算管理（GPU 虚拟化、调度器）、网络与存储方案、AI 框架（深度学习、机器学习、分布式训练、自动化工具）、可观测性与故障诊断（日志、监控、链路追踪、诊断工具）、开源大模型（NLP、多模态模型）、训练与推理框架，以及国产化解决方案（国产硬件与 AI 框架）。","date":1736035200,"description":"本内容概述了现代计算与人工智能生态系统的关键领域，包括单机环境配置（如 CUDA、GPU 驱动）、容器与 Kubernetes 的支持（如容器运行时、设备插件）、硬件与计算管理（GPU 虚拟化、调度器）、网络与存储方案、AI 框架（深度学习、机器学习、分布式训练、自动化工具）、可观测性与故障诊断（日志、监控、链路追踪、诊断工具）、开源大模型（NLP、多模态模型）、训练与推理框架，以及国产化解决方案（国产硬件与 AI 框架）。","dir":"post/","excerpt_html":"本内容概述了现代计算与人工智能生态系统的关键领域，包括单机环境配置（如 CUDA、GPU 驱动）、容器与 Kubernetes 的支持（如容器运行时、设备插件）、硬件与计算管理（GPU 虚拟化、调度器）、网络与存储方案、AI 框架（深度学习、机器学习、分布式训练、自动化工具）、可观测性与故障诊断（日志、监控、链路追踪、诊断工具）、开源大模型（NLP、多模态模型）、训练与推理框架，以及国产化解决方案（国产硬件与 AI 框架）。","excerpt_text":"本内容概述了现代计算与人工智能生态系统的关键领域，包括单机环境配置（如 CUDA、GPU 驱动）、容器与 Kubernetes 的支持（如容器运行时、设备插件）、硬件与计算管理（GPU 虚拟化、调度器）、网络与存储方案、AI 框架（深度学习、机器学习、分布式训练、自动化工具）、可观测性与故障诊断（日志、监控、链路追踪、诊断工具）、开源大模型（NLP、多模态模型）、训练与推理框架，以及国产化解决方案（国产硬件与 AI 框架）。","expirydate":-62135596800,"fuzzywordcount":8500,"html":"本内容概述了现代计算与人工智能生态系统的关键领域，包括单机环境配置（如 CUDA、GPU 驱动）、容器与 Kubernetes 的支持（如容器运行时、设备插件）、硬件与计算管理（GPU 虚拟化、调度器）、网络与存储方案、AI 框架（深度学习、机器学习、分布式训练、自动化工具）、可观测性与故障诊断（日志、监控、链路追踪、诊断工具）、开源大模型（NLP、多模态模型）、训练与推理框架，以及国产化解决方案（国产硬件与 AI 框架）。","keywords":null,"kind":"page","lang":"en","lastmod":1736035200,"objectID":"5e2bc30a0ff0c004bfc03521629c3bb0","permalink":"https://tanjunchen.github.io/post/2025-01-05-ai-infra/","publishdate":"2025-01-05T00:00:00Z","readingtime":17,"relpermalink":"/post/2025-01-05-ai-infra/","section":"post","summary":"本文详尽列举了构建和实施先进人工智能（AI）解决方案所需的关键技术组件。 首先，针对单机环境，文档罗列了并行计算平台、GPU驱动程序、容器化工","tags":["kubernetes","AI","大模型"],"title":"云原生 AI 能力引擎（大模型 AI 基础套件）","type":"post","url":"/post/2025-01-05-ai-infra/","weight":0,"wordcount":8460},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1735689600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1735689600,"objectID":"3e158f34bb1174f803c2f08674ba4d7c","permalink":"https://tanjunchen.github.io/post/2025-01-01-happy-new-year/","publishdate":"2025-01-01T00:00:00Z","readingtime":1,"relpermalink":"/post/2025-01-01-happy-new-year/","section":"post","summary":"新年的钟声已经敲响，我们迎来了崭新的 2025年！🎉 感谢过去一年里大家的陪伴与支持，新的一年，愿我们一起迎接更多美好的时刻。🌟 祝愿大家在 2025 年 ✨","tags":["kubernetes","AI"],"title":"2025 新年快乐（Happy New Year）","type":"post","url":"/post/2025-01-01-happy-new-year/","weight":0,"wordcount":167},{"author":null,"categories":["TECHNOLOGY"],"content":"监测 Linux 内存缺页中断事件","date":1714608e3,"description":"监测 Linux 内存缺页中断事件","dir":"post/","excerpt_html":"监测 Linux 内存缺页中断事件","excerpt_text":"监测 Linux 内存缺页中断事件","expirydate":-62135596800,"fuzzywordcount":10700,"html":"监测 Linux 内存缺页中断事件","keywords":null,"kind":"page","lang":"en","lastmod":1714608e3,"objectID":"5d418503a3e7bdc5a77f6350f63a602d","permalink":"https://tanjunchen.github.io/post/2024-05-02-linux-page-fault/","publishdate":"2024-05-02T00:00:00Z","readingtime":22,"relpermalink":"/post/2024-05-02-linux-page-fault/","section":"post","summary":"内存缺页中断概念 内存缺页中断（page fault）是一种由于程序试图访问的内存页不在物理内存中而产生的一种中断。这通常发生在以下几种情况： 内","tags":["kubernetes","eBPF"],"title":"监测 Linux 内存缺页中断事件","type":"post","url":"/post/2024-05-02-linux-page-fault/","weight":0,"wordcount":10685},{"author":null,"categories":["TECHNOLOGY"],"content":"监测 Linux 内核内存 OOM 事件","date":1714521600,"description":"监测 Linux 内核内存 OOM 事件","dir":"post/","excerpt_html":"监测 Linux 内核内存 OOM 事件","excerpt_text":"监测 Linux 内核内存 OOM 事件","expirydate":-62135596800,"fuzzywordcount":4400,"html":"监测 Linux 内核内存 OOM 事件","keywords":null,"kind":"page","lang":"en","lastmod":1714521600,"objectID":"4a33084c0e5ec906f81298031dffb4af","permalink":"https://tanjunchen.github.io/post/2024-05-01-linux-oom/","publishdate":"2024-05-01T00:00:00Z","readingtime":9,"relpermalink":"/post/2024-05-01-linux-oom/","section":"post","summary":"内存 OOM Linux内核有个机制叫OOMkiller（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗","tags":["kubernetes","eBPF"],"title":"监测 Linux 内核内存 OOM 事件","type":"post","url":"/post/2024-05-01-linux-oom/","weight":0,"wordcount":4383},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1712620800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":9200,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712620800,"objectID":"f4de58355ba7f71515754ca4cbd8ef64","permalink":"https://tanjunchen.github.io/post/2024-04-09-scheduler-framework-04/","publishdate":"2024-04-09T00:00:00Z","readingtime":19,"relpermalink":"/post/2024-04-09-scheduler-framework-04/","section":"post","summary":"Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实","tags":["kubernetes","Scheduler Framework"],"title":"深入理解 Kubernetes Scheduler Framework 调度框架（Part 4）","type":"post","url":"/post/2024-04-09-scheduler-framework-04/","weight":0,"wordcount":9184},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1712534400,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":6500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712534400,"objectID":"815d28cb4fd4e95a4bc1da7781582ce2","permalink":"https://tanjunchen.github.io/post/2024-04-08-scheduler-framework-03/","publishdate":"2024-04-08T00:00:00Z","readingtime":13,"relpermalink":"/post/2024-04-08-scheduler-framework-03/","section":"post","summary":"Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实","tags":["kubernetes","Scheduler Framework"],"title":"深入理解 Kubernetes Scheduler Framework 调度框架（Part 3）","type":"post","url":"/post/2024-04-08-scheduler-framework-03/","weight":0,"wordcount":6405},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1712448e3,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":12900,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712448e3,"objectID":"414990700f8bcf1d2dd308832fea76b0","permalink":"https://tanjunchen.github.io/post/2024-04-07-scheduler-framework-02/","publishdate":"2024-04-07T00:00:00Z","readingtime":26,"relpermalink":"/post/2024-04-07-scheduler-framework-02/","section":"post","summary":"Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实","tags":["kubernetes","Scheduler Framework"],"title":"深入理解 Kubernetes Scheduler Framework 调度框架（Part 2）","type":"post","url":"/post/2024-04-07-scheduler-framework-02/","weight":0,"wordcount":12854},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1712361600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":5500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1712361600,"objectID":"5416d5063d462033b3bb5c6dc6d094fb","permalink":"https://tanjunchen.github.io/post/2024-04-06-scheduler-framework-01/","publishdate":"2024-04-06T00:00:00Z","readingtime":11,"relpermalink":"/post/2024-04-06-scheduler-framework-01/","section":"post","summary":"Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实","tags":["kubernetes","Scheduler Framework"],"title":"深入理解 Kubernetes Scheduler Framework 调度框架（Part 1）","type":"post","url":"/post/2024-04-06-scheduler-framework-01/","weight":0,"wordcount":5457},{"author":null,"categories":["TECHNOLOGY"],"content":"Istio XDS 全量下发在大规模场景下存在性能问题 * Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； * 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用率较大；","date":1709942400,"description":"Istio XDS 全量下发在大规模场景下存在性能问题 * Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； * 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用率较大；","dir":"post/","excerpt_html":"Istio XDS 全量下发在大规模场景下存在性能问题 * Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； * 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用率较大；","excerpt_text":"Istio XDS 全量下发在大规模场景下存在性能问题 * Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； * 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用率较大；","expirydate":-62135596800,"fuzzywordcount":1700,"html":"Istio XDS 全量下发在大规模场景下存在性能问题 * Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； * 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用率较大；","keywords":null,"kind":"page","lang":"en","lastmod":1709942400,"objectID":"b67befab7e3a2bd17b9dcee350d1e7b8","permalink":"https://tanjunchen.github.io/post/2024-03-09-istio-sidecar-performance-test/","publishdate":"2024-03-09T00:00:00Z","readingtime":4,"relpermalink":"/post/2024-03-09-istio-sidecar-performance-test/","section":"post","summary":"背景 Istio XDS 全量下发在大规模场景下存在性能问题。 Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用","tags":["kubernetes","istio"],"title":"Sidecar 在 Istio 大规模场景下性能测试","type":"post","url":"/post/2024-03-09-istio-sidecar-performance-test/","weight":0,"wordcount":1607},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1704585600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":8100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1704585600,"objectID":"a91ad09a5098141fd24e8bd2a723e226","permalink":"https://tanjunchen.github.io/post/2024-01-09-kubernetes-coredns/","publishdate":"2024-01-07T00:00:00Z","readingtime":17,"relpermalink":"/post/2024-01-09-kubernetes-coredns/","section":"post","summary":"K8S 中的 DNS 解析原理 示例如下所示： ➜ tanjunchen_blog (main) kubectl exec -it nginx-0 bash ✱ kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead. root@nginx-0:/# cat /etc/resolv.conf search default.svc.cluster.local svc.cluster.local cluster.local nameserver 10.22.0.10 options ndots:5 root@nginx-0:/# exit exit ➜ tanjunchen_blog (main) kubectl -n kube-system get svc kube-dns ✱ NAME","tags":["Kubernetes","DNS","CoreDNS"],"title":"Kubernetes CoreDNS 核心原理和源码解析","type":"post","url":"/post/2024-01-09-kubernetes-coredns/","weight":0,"wordcount":8091},{"author":null,"categories":["TECHNOLOGY"],"content":"eBPF 在 Linux 操作系统中，可以用于安全、网络和性能监控。AWS、Azure 和 Google Cloud 等云厂商 eBPF 相关云产品相继被推出，国内云厂商也有很多的落地与实践，如阿里云、华为云、字节火山引擎、百度智能云等。","date":170208e4,"description":"eBPF 在 Linux 操作系统中，可以用于安全、网络和性能监控。AWS、Azure 和 Google Cloud 等云厂商 eBPF 相关云产品相继被推出，国内云厂商也有很多的落地与实践，如阿里云、华为云、字节火山引擎、百度智能云等。","dir":"post/","excerpt_html":"eBPF 在 Linux 操作系统中，可以用于安全、网络和性能监控。AWS、Azure 和 Google Cloud 等云厂商 eBPF 相关云产品相继被推出，国内云厂商也有很多的落地与实践，如阿里云、华为云、字节火山引擎、百度智能云等。","excerpt_text":"eBPF 在 Linux 操作系统中，可以用于安全、网络和性能监控。AWS、Azure 和 Google Cloud 等云厂商 eBPF 相关云产品相继被推出，国内云厂商也有很多的落地与实践，如阿里云、华为云、字节火山引擎、百度智能云等。","expirydate":-62135596800,"fuzzywordcount":12600,"html":"eBPF 在 Linux 操作系统中，可以用于安全、网络和性能监控。AWS、Azure 和 Google Cloud 等云厂商 eBPF 相关云产品相继被推出，国内云厂商也有很多的落地与实践，如阿里云、华为云、字节火山引擎、百度智能云等。","keywords":null,"kind":"page","lang":"en","lastmod":170208e4,"objectID":"5d809799d5d310ed1b3dc0c9a2524771","permalink":"https://tanjunchen.github.io/post/2023-12-09-ebpf-share/","publishdate":"2023-12-09T00:00:00Z","readingtime":25,"relpermalink":"/post/2023-12-09-ebpf-share/","section":"post","summary":"小试牛刀 root@instance-820epr0w:~/tanjunchen# ./helloworld Hello World Hello World ...... root@instance-820epr0w:~/tanjunchen/bpf-developer-tutorial/src/24-hide# ps aux | grep helloworld root 3312792 0.0 0.0 2776 964 pts/0 S+ 20:22 0:00 ./helloworld root 3313669 0.0 0.0 9748 2316 pts/1 S+ 20:22 0:00 grep --color=auto helloworld 问题：如果我不想让别人看到我正在运行的进程，可以如何实现？","tags":["kubernetes","eBPF"],"title":"eBPF 探索 Linux 可观测性、网络、安全、性能","type":"post","url":"/post/2023-12-09-ebpf-share/","weight":0,"wordcount":12524},{"author":null,"categories":["TECHNOLOGY"],"content":"pwru 是 Cilium 推出的基于 eBPF 开发的网络数据包排查工具，它提供了更细粒度的网络数据包排查方案。本文将介绍 pwru 的使用方法和经典场景，并介绍其实现原理。pwru 用于在Linux内核中追踪网络数据包，并具有高级过滤能力。它允许对内核状态进行细粒度的跟踪，并可以用来调试网络连接性问题。","date":1699660800,"description":"pwru 是 Cilium 推出的基于 eBPF 开发的网络数据包排查工具，它提供了更细粒度的网络数据包排查方案。本文将介绍 pwru 的使用方法和经典场景，并介绍其实现原理。pwru 用于在Linux内核中追踪网络数据包，并具有高级过滤能力。它允许对内核状态进行细粒度的跟踪，并可以用来调试网络连接性问题。","dir":"post/","excerpt_html":"pwru 是 Cilium 推出的基于 eBPF 开发的网络数据包排查工具，它提供了更细粒度的网络数据包排查方案。本文将介绍 pwru 的使用方法和经典场景，并介绍其实现原理。pwru 用于在Linux内核中追踪网络数据包，并具有高级过滤能力。它允许对内核状态进行细粒度的跟踪，并可以用来调试网络连接性问题。","excerpt_text":"pwru 是 Cilium 推出的基于 eBPF 开发的网络数据包排查工具，它提供了更细粒度的网络数据包排查方案。本文将介绍 pwru 的使用方法和经典场景，并介绍其实现原理。pwru 用于在Linux内核中追踪网络数据包，并具有高级过滤能力。它允许对内核状态进行细粒度的跟踪，并可以用来调试网络连接性问题。","expirydate":-62135596800,"fuzzywordcount":4700,"html":"pwru 是 Cilium 推出的基于 eBPF 开发的网络数据包排查工具，它提供了更细粒度的网络数据包排查方案。本文将介绍 pwru 的使用方法和经典场景，并介绍其实现原理。pwru 用于在Linux内核中追踪网络数据包，并具有高级过滤能力。它允许对内核状态进行细粒度的跟踪，并可以用来调试网络连接性问题。","keywords":null,"kind":"page","lang":"en","lastmod":1699660800,"objectID":"c88ba733a4d3b987dee41f04272bcdec","permalink":"https://tanjunchen.github.io/post/2023-11-11-ebpf-pwru/","publishdate":"2023-11-11T00:00:00Z","readingtime":10,"relpermalink":"/post/2023-11-11-ebpf-pwru/","section":"post","summary":"介绍 Linux 中的网络是个很复杂的问题！！！我们常常会遇见以下问题。 网络命名空间（network）使网络变得更加复杂； 当一个数据包丢失时，作为网络工","tags":["kubernetes","eBPF"],"title":"pwru: 一款基于 eBPF 的细粒度网络数据包排查工具","type":"post","url":"/post/2023-11-11-ebpf-pwru/","weight":0,"wordcount":4620},{"author":null,"categories":["TECHNOLOGY"],"content":"主要介绍基础项目如BCC、Cilium等，新兴项目如Pyroscope、eCapture等，同时介绍基础设施如Linux Kernel、bpftool和常见的eBPF工具链如cilium/ebpf、libbpfgo、libbpf等。","date":1699056e3,"description":"主要介绍基础项目如BCC、Cilium等，新兴项目如Pyroscope、eCapture等，同时介绍基础设施如Linux Kernel、bpftool和常见的eBPF工具链如cilium/ebpf、libbpfgo、libbpf等。","dir":"post/","excerpt_html":"主要介绍基础项目如BCC、Cilium等，新兴项目如Pyroscope、eCapture等，同时介绍基础设施如Linux Kernel、bpftool和常见的eBPF工具链如cilium/ebpf、libbpfgo、libbpf等。","excerpt_text":"主要介绍基础项目如BCC、Cilium等，新兴项目如Pyroscope、eCapture等，同时介绍基础设施如Linux Kernel、bpftool和常见的eBPF工具链如cilium/ebpf、libbpfgo、libbpf等。","expirydate":-62135596800,"fuzzywordcount":9100,"html":"主要介绍基础项目如BCC、Cilium等，新兴项目如Pyroscope、eCapture等，同时介绍基础设施如Linux Kernel、bpftool和常见的eBPF工具链如cilium/ebpf、libbpfgo、libbpf等。","keywords":null,"kind":"page","lang":"en","lastmod":1699056e3,"objectID":"d5a72e257be37d7477371b4f94644db7","permalink":"https://tanjunchen.github.io/post/2023-11-04-ebpf-ecosystem/","publishdate":"2023-11-04T00:00:00Z","readingtime":19,"relpermalink":"/post/2023-11-04-ebpf-ecosystem/","section":"post","summary":"主要项目 BCC https://github.com/iovisor/bcc，BCC是一个基于eBPF构建的用于创建高效内核跟踪和程序操作的工具包","tags":["kubernetes","eBPF"],"title":"eBPF 周边生态圈明星产品","type":"post","url":"/post/2023-11-04-ebpf-ecosystem/","weight":0,"wordcount":9067},{"author":null,"categories":["TECHNOLOGY"],"content":"Pixie 是一个用于 Kubernetes 应用程序的开源可观察性平台。Pixie 使用 eBPF 自动捕获遥测数据，可以使用 Pixie 查看集群的状态（服务映射、集群资源、应用程序流量），还可以深入查看更详细的视图（pod 状态、火焰图、应用程序单个请求生命周期）。Pixie 由 New Relic 公司于 2021 年 6 月捐赠给 [CNCF](https://www.cncf.io/) 作为孵化项目。","date":1697846400,"description":"Pixie 是一个用于 Kubernetes 应用程序的开源可观察性平台。Pixie 使用 eBPF 自动捕获遥测数据，可以使用 Pixie 查看集群的状态（服务映射、集群资源、应用程序流量），还可以深入查看更详细的视图（pod 状态、火焰图、应用程序单个请求生命周期）。Pixie 由 New Relic 公司于 2021 年 6 月捐赠给 [CNCF](https://www.cncf.io/) 作为孵化项目。","dir":"post/","excerpt_html":"Pixie 是一个用于 Kubernetes 应用程序的开源可观察性平台。Pixie 使用 eBPF 自动捕获遥测数据，可以使用 Pixie 查看集群的状态（服务映射、集群资源、应用程序流量），还可以深入查看更详细的视图（pod 状态、火焰图、应用程序单个请求生命周期）。Pixie 由 New Relic 公司于 2021 年 6 月捐赠给 [CNCF](https://www.cncf.io/) 作为孵化项目。","excerpt_text":"Pixie 是一个用于 Kubernetes 应用程序的开源可观察性平台。Pixie 使用 eBPF 自动捕获遥测数据，可以使用 Pixie 查看集群的状态（服务映射、集群资源、应用程序流量），还可以深入查看更详细的视图（pod 状态、火焰图、应用程序单个请求生命周期）。Pixie 由 New Relic 公司于 2021 年 6 月捐赠给 [CNCF](https://www.cncf.io/) 作为孵化项目。","expirydate":-62135596800,"fuzzywordcount":3400,"html":"Pixie 是一个用于 Kubernetes 应用程序的开源可观察性平台。Pixie 使用 eBPF 自动捕获遥测数据，可以使用 Pixie 查看集群的状态（服务映射、集群资源、应用程序流量），还可以深入查看更详细的视图（pod 状态、火焰图、应用程序单个请求生命周期）。Pixie 由 New Relic 公司于 2021 年 6 月捐赠给 [CNCF](https://www.cncf.io/) 作为孵化项目。","keywords":null,"kind":"page","lang":"en","lastmod":1697846400,"objectID":"07dae61008ed3788fab07e8422b52ee5","permalink":"https://tanjunchen.github.io/post/2023-10-21-introduce-pixie/","publishdate":"2023-10-21T00:00:00Z","readingtime":7,"relpermalink":"/post/2023-10-21-introduce-pixie/","section":"post","summary":"bpftrace bpftrace 是 Linux eBPF 的高级跟踪语言。 它的语言受到 awk 和 C 以及其他跟踪器（例如 DTrace 和 SystemTap）的启发。bpftrace 开发语言是 shell，支持 x","tags":["kubernetes","pixie","eBPF"],"title":"使用 Pixie 实现 Kubernetes 服务可观测性（4）","type":"post","url":"/post/2023-10-21-introduce-pixie/","weight":0,"wordcount":3339},{"author":null,"categories":["TECHNOLOGY"],"content":"Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流量信息，帮助用户理解网络流量的模式，检测网络问题，理解应用的行为。Hubble 提供了一个丰富的可视化界面，可以显示网络流量的详细信息，包括源 IP、目标 IP、端口号、协议类型、数据包数量、字节数量等。","date":1697241600,"description":"Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流量信息，帮助用户理解网络流量的模式，检测网络问题，理解应用的行为。Hubble 提供了一个丰富的可视化界面，可以显示网络流量的详细信息，包括源 IP、目标 IP、端口号、协议类型、数据包数量、字节数量等。","dir":"post/","excerpt_html":"Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流量信息，帮助用户理解网络流量的模式，检测网络问题，理解应用的行为。Hubble 提供了一个丰富的可视化界面，可以显示网络流量的详细信息，包括源 IP、目标 IP、端口号、协议类型、数据包数量、字节数量等。","excerpt_text":"Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流量信息，帮助用户理解网络流量的模式，检测网络问题，理解应用的行为。Hubble 提供了一个丰富的可视化界面，可以显示网络流量的详细信息，包括源 IP、目标 IP、端口号、协议类型、数据包数量、字节数量等。","expirydate":-62135596800,"fuzzywordcount":1200,"html":"Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流量信息，帮助用户理解网络流量的模式，检测网络问题，理解应用的行为。Hubble 提供了一个丰富的可视化界面，可以显示网络流量的详细信息，包括源 IP、目标 IP、端口号、协议类型、数据包数量、字节数量等。","keywords":null,"kind":"page","lang":"en","lastmod":1697241600,"objectID":"bdb46a83b4c5d8daaeafa294a3066243","permalink":"https://tanjunchen.github.io/post/2023-10-14-cilium-hubble/","publishdate":"2023-10-14T00:00:00Z","readingtime":3,"relpermalink":"/post/2023-10-14-cilium-hubble/","section":"post","summary":"介绍 Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流","tags":["kubernetes","hubble","eBPF","cilium"],"title":"使用 Hubble 实现 Kubernetes 服务可观测性（3）","type":"post","url":"/post/2023-10-14-cilium-hubble/","weight":0,"wordcount":1139},{"author":null,"categories":["TECHNOLOGY"],"content":"本篇文章主要介绍 Coroot 架构、核心功能、示例、核心源码、示例等。","date":1696464e3,"description":"本篇文章主要介绍 Coroot 架构、核心功能、示例、核心源码、示例等。","dir":"post/","excerpt_html":"本篇文章主要介绍 Coroot 架构、核心功能、示例、核心源码、示例等。","excerpt_text":"本篇文章主要介绍 Coroot 架构、核心功能、示例、核心源码、示例等。","expirydate":-62135596800,"fuzzywordcount":6900,"html":"本篇文章主要介绍 Coroot 架构、核心功能、示例、核心源码、示例等。","keywords":null,"kind":"page","lang":"en","lastmod":1696464e3,"objectID":"45dc46ebbf92381ac1ae2f1a280a120a","permalink":"https://tanjunchen.github.io/post/2023-10-05-ebpf-coroot/","publishdate":"2023-10-05T00:00:00Z","readingtime":14,"relpermalink":"/post/2023-10-05-ebpf-coroot/","section":"post","summary":"核心实现思路： coroot 使用数据库 SQLite（生产环境 Click House）+ Prometheus + Opentelemetry 去做应用（网络、IO、磁盘、文件等）可视化。 coroot-node-agent 使用 eBPF（trace","tags":["kubernetes","coroot","eBPF","opentelemetry"],"title":"使用 coroot 实现 Kubernetes 服务可观测性（2）","type":"post","url":"/post/2023-10-05-ebpf-coroot/","weight":0,"wordcount":6831},{"author":null,"categories":["TECHNOLOGY"],"content":"在我们的学习过程中，首先我们探讨了在 Docker Swarm 集群模式下，服务之间是如何进行通信的。我们了解到，Docker Swarm 使用内置的服务发现和负载均衡机制来实现服务间的通信。然后，我们转向 Kubernetes，研究了在 kube-proxy、Istio Service Mesh 和 Cilium 三种模式下服务到服务的通信机制。在 kube-proxy 模式下，我们了解到它使用 Iptables 或者 IPVS 来实现服务的负载均衡。而在 Istio Service Mesh 模式下，服务间的通信是通过 Envoy 代理来实现的，它提供了丰富的流量控制和安全策略。最后，在 Cilium 模式下，我们学习了它是如何利用 BPF（Berkeley Packet Filter）来实现服务通信的。这三种模式各有特点，为我们提供了丰富的选择来满足不同的服务通信需求。","date":1694822400,"description":"在我们的学习过程中，首先我们探讨了在 Docker Swarm 集群模式下，服务之间是如何进行通信的。我们了解到，Docker Swarm 使用内置的服务发现和负载均衡机制来实现服务间的通信。然后，我们转向 Kubernetes，研究了在 kube-proxy、Istio Service Mesh 和 Cilium 三种模式下服务到服务的通信机制。在 kube-proxy 模式下，我们了解到它使用 Iptables 或者 IPVS 来实现服务的负载均衡。而在 Istio Service Mesh 模式下，服务间的通信是通过 Envoy 代理来实现的，它提供了丰富的流量控制和安全策略。最后，在 Cilium 模式下，我们学习了它是如何利用 BPF（Berkeley Packet Filter）来实现服务通信的。这三种模式各有特点，为我们提供了丰富的选择来满足不同的服务通信需求。","dir":"post/","excerpt_html":"在我们的学习过程中，首先我们探讨了在 Docker Swarm 集群模式下，服务之间是如何进行通信的。我们了解到，Docker Swarm 使用内置的服务发现和负载均衡机制来实现服务间的通信。然后，我们转向 Kubernetes，研究了在 kube-proxy、Istio Service Mesh 和 Cilium 三种模式下服务到服务的通信机制。在 kube-proxy 模式下，我们了解到它使用 Iptables 或者 IPVS 来实现服务的负载均衡。而在 Istio Service Mesh 模式下，服务间的通信是通过 Envoy 代理来实现的，它提供了丰富的流量控制和安全策略。最后，在 Cilium 模式下，我们学习了它是如何利用 BPF（Berkeley Packet Filter）来实现服务通信的。这三种模式各有特点，为我们提供了丰富的选择来满足不同的服务通信需求。","excerpt_text":"在我们的学习过程中，首先我们探讨了在 Docker Swarm 集群模式下，服务之间是如何进行通信的。我们了解到，Docker Swarm 使用内置的服务发现和负载均衡机制来实现服务间的通信。然后，我们转向 Kubernetes，研究了在 kube-proxy、Istio Service Mesh 和 Cilium 三种模式下服务到服务的通信机制。在 kube-proxy 模式下，我们了解到它使用 Iptables 或者 IPVS 来实现服务的负载均衡。而在 Istio Service Mesh 模式下，服务间的通信是通过 Envoy 代理来实现的，它提供了丰富的流量控制和安全策略。最后，在 Cilium 模式下，我们学习了它是如何利用 BPF（Berkeley Packet Filter）来实现服务通信的。这三种模式各有特点，为我们提供了丰富的选择来满足不同的服务通信需求。","expirydate":-62135596800,"fuzzywordcount":3200,"html":"在我们的学习过程中，首先我们探讨了在 Docker Swarm 集群模式下，服务之间是如何进行通信的。我们了解到，Docker Swarm 使用内置的服务发现和负载均衡机制来实现服务间的通信。然后，我们转向 Kubernetes，研究了在 kube-proxy、Istio Service Mesh 和 Cilium 三种模式下服务到服务的通信机制。在 kube-proxy 模式下，我们了解到它使用 Iptables 或者 IPVS 来实现服务的负载均衡。而在 Istio Service Mesh 模式下，服务间的通信是通过 Envoy 代理来实现的，它提供了丰富的流量控制和安全策略。最后，在 Cilium 模式下，我们学习了它是如何利用 BPF（Berkeley Packet Filter）来实现服务通信的。这三种模式各有特点，为我们提供了丰富的选择来满足不同的服务通信需求。","keywords":null,"kind":"page","lang":"en","lastmod":1694822400,"objectID":"4337117193721e877b07261fbfe27374","permalink":"https://tanjunchen.github.io/post/2023-09-16-kubernetes-service/","publishdate":"2023-09-16T00:00:00Z","readingtime":7,"relpermalink":"/post/2023-09-16-kubernetes-service/","section":"post","summary":"我们将应用程序部署到 Kubernetes 集群时，比较重要的一步是创建 Service，它允许集群内的应用程序或外部客户端通过 Service 访问。 Kubernetes 中的服务是一种简单的抽象，","tags":["kubernetes","istio","cilium","cni"],"title":"深入研究 Kubernetes 集群中的 Service 通信机制","type":"post","url":"/post/2023-09-16-kubernetes-service/","weight":0,"wordcount":3138},{"author":null,"categories":["TECHNOLOGY"],"content":"Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使用一种可以集成到其基础设施中的 Mesh 数据平面，而不是需要和应用一起部署的 sidecar。同时，该模式可以提供和 Sidecar 模式相同的零信任安全、遥测和流量管理等 Istio 的核心功能。目前 Ambient mesh 处于 alpha 阶段。","date":1693612800,"description":"Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使用一种可以集成到其基础设施中的 Mesh 数据平面，而不是需要和应用一起部署的 sidecar。同时，该模式可以提供和 Sidecar 模式相同的零信任安全、遥测和流量管理等 Istio 的核心功能。目前 Ambient mesh 处于 alpha 阶段。","dir":"post/","excerpt_html":"Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使用一种可以集成到其基础设施中的 Mesh 数据平面，而不是需要和应用一起部署的 sidecar。同时，该模式可以提供和 Sidecar 模式相同的零信任安全、遥测和流量管理等 Istio 的核心功能。目前 Ambient mesh 处于 alpha 阶段。","excerpt_text":"Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使用一种可以集成到其基础设施中的 Mesh 数据平面，而不是需要和应用一起部署的 sidecar。同时，该模式可以提供和 Sidecar 模式相同的零信任安全、遥测和流量管理等 Istio 的核心功能。目前 Ambient mesh 处于 alpha 阶段。","expirydate":-62135596800,"fuzzywordcount":5900,"html":"Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使用一种可以集成到其基础设施中的 Mesh 数据平面，而不是需要和应用一起部署的 sidecar。同时，该模式可以提供和 Sidecar 模式相同的零信任安全、遥测和流量管理等 Istio 的核心功能。目前 Ambient mesh 处于 alpha 阶段。","keywords":null,"kind":"page","lang":"en","lastmod":1693612800,"objectID":"5084ba6f5ace8985f6ee927759ad4785","permalink":"https://tanjunchen.github.io/post/2023-09-02-ambient-mesh-learn-first/","publishdate":"2023-09-02T00:00:00Z","readingtime":12,"relpermalink":"/post/2023-09-02-ambient-mesh-learn-first/","section":"post","summary":"Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使","tags":["ambient-mesh","istio"],"title":"初识 Istio Ambient Mesh 新模式","type":"post","url":"/post/2023-09-02-ambient-mesh-learn-first/","weight":0,"wordcount":5864},{"author":null,"categories":["TECHNOLOGY"],"content":"似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF 构建高性能、可扩展的容器网络印象深刻，并且还具备 L7 策略和可观测性能力。如果你之前还没有听说过 Cilium，可以去了解与试用一下！","date":1692403200,"description":"似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF 构建高性能、可扩展的容器网络印象深刻，并且还具备 L7 策略和可观测性能力。如果你之前还没有听说过 Cilium，可以去了解与试用一下！","dir":"post/","excerpt_html":"似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF 构建高性能、可扩展的容器网络印象深刻，并且还具备 L7 策略和可观测性能力。如果你之前还没有听说过 Cilium，可以去了解与试用一下！","excerpt_text":"似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF 构建高性能、可扩展的容器网络印象深刻，并且还具备 L7 策略和可观测性能力。如果你之前还没有听说过 Cilium，可以去了解与试用一下！","expirydate":-62135596800,"fuzzywordcount":5700,"html":"似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF 构建高性能、可扩展的容器网络印象深刻，并且还具备 L7 策略和可观测性能力。如果你之前还没有听说过 Cilium，可以去了解与试用一下！","keywords":null,"kind":"page","lang":"en","lastmod":1692403200,"objectID":"87a955afea78952744e45cfa5a0b8eb4","permalink":"https://tanjunchen.github.io/post/2023-08-19-cilium-iptables/","publishdate":"2023-08-19T00:00:00Z","readingtime":12,"relpermalink":"/post/2023-08-19-cilium-iptables/","section":"post","summary":"目的 浅析 Cilium 为什么仍然使用 iptables。 前言 似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF","tags":["cilium","iptables"],"title":"浅析 Cilium 与 iptables","type":"post","url":"/post/2023-08-19-cilium-iptables/","weight":0,"wordcount":5619},{"author":null,"categories":["TECHNOLOGY"],"content":"从早期开始，Cilium 就通过网络和应用程序协议层来提供连接、负载平衡、安全性和可观察性，从而与服务网格概念保持良好一致。对于所有网络处理，包括 IP、TCP 和 UDP 等协议，Cilium 使用 eBPF 作为高效的内核数据路径。HTTP、Kafka、gRPC、DNS 等应用层协议通过 Envoy 等代理进行解析。","date":1691798400,"description":"从早期开始，Cilium 就通过网络和应用程序协议层来提供连接、负载平衡、安全性和可观察性，从而与服务网格概念保持良好一致。对于所有网络处理，包括 IP、TCP 和 UDP 等协议，Cilium 使用 eBPF 作为高效的内核数据路径。HTTP、Kafka、gRPC、DNS 等应用层协议通过 Envoy 等代理进行解析。","dir":"post/","excerpt_html":"从早期开始，Cilium 就通过网络和应用程序协议层来提供连接、负载平衡、安全性和可观察性，从而与服务网格概念保持良好一致。对于所有网络处理，包括 IP、TCP 和 UDP 等协议，Cilium 使用 eBPF 作为高效的内核数据路径。HTTP、Kafka、gRPC、DNS 等应用层协议通过 Envoy 等代理进行解析。","excerpt_text":"从早期开始，Cilium 就通过网络和应用程序协议层来提供连接、负载平衡、安全性和可观察性，从而与服务网格概念保持良好一致。对于所有网络处理，包括 IP、TCP 和 UDP 等协议，Cilium 使用 eBPF 作为高效的内核数据路径。HTTP、Kafka、gRPC、DNS 等应用层协议通过 Envoy 等代理进行解析。","expirydate":-62135596800,"fuzzywordcount":4100,"html":"从早期开始，Cilium 就通过网络和应用程序协议层来提供连接、负载平衡、安全性和可观察性，从而与服务网格概念保持良好一致。对于所有网络处理，包括 IP、TCP 和 UDP 等协议，Cilium 使用 eBPF 作为高效的内核数据路径。HTTP、Kafka、gRPC、DNS 等应用层协议通过 Envoy 等代理进行解析。","keywords":null,"kind":"page","lang":"en","lastmod":1691798400,"objectID":"8342d1e8bb7c1968c376720d723898fb","permalink":"https://tanjunchen.github.io/post/2023-08-12-cilium-mesh-example/","publishdate":"2023-08-12T00:00:00Z","readingtime":9,"relpermalink":"/post/2023-08-12-cilium-mesh-example/","section":"post","summary":"Cilium 官方版本给出的 Service Mesh 全景图，不同于其它 Service Mesh 开源项目设计了很多 CRD 概念，Cilium Service Mesh 当前专注实现了 mesh data plane，通过开放、包容的设计，能够","tags":["eBPF","cilium","kubernetes"],"title":"Cilium Mesh 常见场景与示例","type":"post","url":"/post/2023-08-12-cilium-mesh-example/","weight":0,"wordcount":4013},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1690243200,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1690243200,"objectID":"9efc9801f0400f234720d592f72c37d7","permalink":"https://tanjunchen.github.io/post/2023-07-25-network-package/","publishdate":"2023-07-25T00:00:00Z","readingtime":5,"relpermalink":"/post/2023-07-25-network-package/","section":"post","summary":"当网络数据包到达网卡时，数据包从网卡是如何到 Linux（以内核4.19举例） 网络协议栈？先回顾 OSI 七层模型与 TCP/IP 五层模型，如下所示： TCP/IP 应用层数据","tags":["Linux","network"],"title":"Linux 是如何处理网络数据包？","type":"post","url":"/post/2023-07-25-network-package/","weight":0,"wordcount":2347},{"author":null,"categories":["TECHNOLOGY"],"content":"Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络图。","date":1687651200,"description":"Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络图。","dir":"post/","excerpt_html":"Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络图。","excerpt_text":"Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络图。","expirydate":-62135596800,"fuzzywordcount":2700,"html":"Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络图。","keywords":null,"kind":"page","lang":"en","lastmod":1687651200,"objectID":"3086b1b5299bf4803929c5becd5e9631","permalink":"https://tanjunchen.github.io/post/2023-06-25-caretta-ebpf/","publishdate":"2023-06-25T00:00:00Z","readingtime":6,"relpermalink":"/post/2023-06-25-caretta-ebpf/","section":"post","summary":"前言 为啥 eBPF 卸载之后，使用 bpftool 还能看到相关 map、prog 等？具体可以参考文章。 介绍 Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络","tags":["eBPF","kubernetes"],"title":"使用 caretta 实现 Kubernetes 服务可观测性（1）","type":"post","url":"/post/2023-06-25-caretta-ebpf/","weight":0,"wordcount":2641},{"author":null,"categories":["TECHNOLOGY"],"content":"Cilium 是一个用于容器和微服务网络安全的开源软件项目。它提供了一种基于 Linux 内核的数据平面和一个高级的控制平面，用于实现网络和安全策略的管理。Cilium 的设计理念是通过深度集成到容器和 Kubernetes 中，提供全面的安全和网络功能，同时保持高性能和可扩展性。它使用 Linux 内核的 eBPF (extended Berkeley Packet Filter) 技术来实现高效的数据平面，并使用 Kubernetes API 来管理网络和安全策略。Cilium 还支持多种网络和安全功能，例如应用层负载均衡、服务发现、网络加密和网络策略等。","date":1682899200,"description":"Cilium 是一个用于容器和微服务网络安全的开源软件项目。它提供了一种基于 Linux 内核的数据平面和一个高级的控制平面，用于实现网络和安全策略的管理。Cilium 的设计理念是通过深度集成到容器和 Kubernetes 中，提供全面的安全和网络功能，同时保持高性能和可扩展性。它使用 Linux 内核的 eBPF (extended Berkeley Packet Filter) 技术来实现高效的数据平面，并使用 Kubernetes API 来管理网络和安全策略。Cilium 还支持多种网络和安全功能，例如应用层负载均衡、服务发现、网络加密和网络策略等。","dir":"post/","excerpt_html":"Cilium 是一个用于容器和微服务网络安全的开源软件项目。它提供了一种基于 Linux 内核的数据平面和一个高级的控制平面，用于实现网络和安全策略的管理。Cilium 的设计理念是通过深度集成到容器和 Kubernetes 中，提供全面的安全和网络功能，同时保持高性能和可扩展性。它使用 Linux 内核的 eBPF (extended Berkeley Packet Filter) 技术来实现高效的数据平面，并使用 Kubernetes API 来管理网络和安全策略。Cilium 还支持多种网络和安全功能，例如应用层负载均衡、服务发现、网络加密和网络策略等。","excerpt_text":"Cilium 是一个用于容器和微服务网络安全的开源软件项目。它提供了一种基于 Linux 内核的数据平面和一个高级的控制平面，用于实现网络和安全策略的管理。Cilium 的设计理念是通过深度集成到容器和 Kubernetes 中，提供全面的安全和网络功能，同时保持高性能和可扩展性。它使用 Linux 内核的 eBPF (extended Berkeley Packet Filter) 技术来实现高效的数据平面，并使用 Kubernetes API 来管理网络和安全策略。Cilium 还支持多种网络和安全功能，例如应用层负载均衡、服务发现、网络加密和网络策略等。","expirydate":-62135596800,"fuzzywordcount":12500,"html":"Cilium 是一个用于容器和微服务网络安全的开源软件项目。它提供了一种基于 Linux 内核的数据平面和一个高级的控制平面，用于实现网络和安全策略的管理。Cilium 的设计理念是通过深度集成到容器和 Kubernetes 中，提供全面的安全和网络功能，同时保持高性能和可扩展性。它使用 Linux 内核的 eBPF (extended Berkeley Packet Filter) 技术来实现高效的数据平面，并使用 Kubernetes API 来管理网络和安全策略。Cilium 还支持多种网络和安全功能，例如应用层负载均衡、服务发现、网络加密和网络策略等。","keywords":null,"kind":"page","lang":"en","lastmod":1682899200,"objectID":"0063e6e456ac55033e66561fe7b5e086","permalink":"https://tanjunchen.github.io/post/2023-05-01-cilium-learn/","publishdate":"2023-05-01T00:00:00Z","readingtime":25,"relpermalink":"/post/2023-05-01-cilium-learn/","section":"post","summary":"背景 传统的基于二层转发（Linux bridge、Netfilter/iptables、OVS 等）和/或三层路由的网络虚拟化方案中，数据包的转","tags":["ebpf","kubernetes","cni","cilium"],"title":"深入理解 Cilium 核心原理","type":"post","url":"/post/2023-05-01-cilium-learn/","weight":0,"wordcount":12425},{"author":null,"categories":["TECHNOLOGY"],"content":"我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，越来越多的客户要求提供 Cilium 功能。","date":1681948800,"description":"我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，越来越多的客户要求提供 Cilium 功能。","dir":"post/","excerpt_html":"我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，越来越多的客户要求提供 Cilium 功能。","excerpt_text":"我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，越来越多的客户要求提供 Cilium 功能。","expirydate":-62135596800,"fuzzywordcount":1900,"html":"我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，越来越多的客户要求提供 Cilium 功能。","keywords":null,"kind":"page","lang":"en","lastmod":1681948800,"objectID":"a92080230c8c92110a66179e4141cd7b","permalink":"https://tanjunchen.github.io/post/2023-04-20-cilium-mesh-one-mesh/","publishdate":"2023-04-20T00:00:00Z","readingtime":4,"relpermalink":"/post/2023-04-20-cilium-mesh-one-mesh/","section":"post","summary":"我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，","tags":["ebpf","kubernetes","cilium mesh","cilium"],"title":"译文：Cilium Mesh - Mesh 连接所有应用","type":"post","url":"/post/2023-04-20-cilium-mesh-one-mesh/","weight":0,"wordcount":1811},{"author":null,"categories":["TECHNOLOGY"],"content":"通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socket filter、tc filter、perf events 等，本文主要介绍上述事件 Hook 跟踪点。","date":1680652800,"description":"通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socket filter、tc filter、perf events 等，本文主要介绍上述事件 Hook 跟踪点。","dir":"post/","excerpt_html":"通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socket filter、tc filter、perf events 等，本文主要介绍上述事件 Hook 跟踪点。","excerpt_text":"通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socket filter、tc filter、perf events 等，本文主要介绍上述事件 Hook 跟踪点。","expirydate":-62135596800,"fuzzywordcount":6900,"html":"通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socket filter、tc filter、perf events 等，本文主要介绍上述事件 Hook 跟踪点。","keywords":null,"kind":"page","lang":"en","lastmod":1680652800,"objectID":"16aac5ff4f1f1f8634a8117275d31741","permalink":"https://tanjunchen.github.io/post/2023-04-05-ebpf-category/","publishdate":"2023-04-05T00:00:00Z","readingtime":14,"relpermalink":"/post/2023-04-05-ebpf-category/","section":"post","summary":"通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socke","tags":["ebpf","kubernetes"],"title":"简介 eBPF 常见跟踪点类型","type":"post","url":"/post/2023-04-05-ebpf-category/","weight":0,"wordcount":6860},{"author":null,"categories":["TECHNOLOGY"],"content":"本文主要介绍什么是 eBPF？、介绍 eBPF、为什么使用 eBPF？、开发工具链等内容","date":1680307200,"description":"本文主要介绍什么是 eBPF？、介绍 eBPF、为什么使用 eBPF？、开发工具链等内容","dir":"post/","excerpt_html":"本文主要介绍什么是 eBPF？、介绍 eBPF、为什么使用 eBPF？、开发工具链等内容","excerpt_text":"本文主要介绍什么是 eBPF？、介绍 eBPF、为什么使用 eBPF？、开发工具链等内容","expirydate":-62135596800,"fuzzywordcount":8900,"html":"本文主要介绍什么是 eBPF？、介绍 eBPF、为什么使用 eBPF？、开发工具链等内容","keywords":null,"kind":"page","lang":"en","lastmod":1680307200,"objectID":"36d4801ea462a5086458cb4adc5150eb","permalink":"https://tanjunchen.github.io/post/2023-04-01-ebpf-introduce/","publishdate":"2023-04-01T00:00:00Z","readingtime":18,"relpermalink":"/post/2023-04-01-ebpf-introduce/","section":"post","summary":"什么是 eBPF？ eBPF 是一项革命性的技术，起源于 Linux 内核，可以在操作系统内核等特权上下文中运行沙盒程序。它用于安全有效地扩展内核的功能，而无需更改","tags":["ebpf","kubernetes"],"title":"简单了解与学习 eBPF","type":"post","url":"/post/2023-04-01-ebpf-introduce/","weight":0,"wordcount":8808},{"author":null,"categories":["TECHNOLOGY"],"content":"自 Service Mesh 横空出世，通过 Sidecar 将微服务通信下沉到基础设施层，屏蔽微服务处理各种通信问题的复杂度，深受工程师的喜爱。Service Mesh 是如何在百度大规模落地与实践的，我跟大家简单介绍与分享。","date":1679011200,"description":"自 Service Mesh 横空出世，通过 Sidecar 将微服务通信下沉到基础设施层，屏蔽微服务处理各种通信问题的复杂度，深受工程师的喜爱。Service Mesh 是如何在百度大规模落地与实践的，我跟大家简单介绍与分享。","dir":"post/","excerpt_html":"自 Service Mesh 横空出世，通过 Sidecar 将微服务通信下沉到基础设施层，屏蔽微服务处理各种通信问题的复杂度，深受工程师的喜爱。Service Mesh 是如何在百度大规模落地与实践的，我跟大家简单介绍与分享。","excerpt_text":"自 Service Mesh 横空出世，通过 Sidecar 将微服务通信下沉到基础设施层，屏蔽微服务处理各种通信问题的复杂度，深受工程师的喜爱。Service Mesh 是如何在百度大规模落地与实践的，我跟大家简单介绍与分享。","expirydate":-62135596800,"fuzzywordcount":9500,"html":"自 Service Mesh 横空出世，通过 Sidecar 将微服务通信下沉到基础设施层，屏蔽微服务处理各种通信问题的复杂度，深受工程师的喜爱。Service Mesh 是如何在百度大规模落地与实践的，我跟大家简单介绍与分享。","keywords":null,"kind":"page","lang":"en","lastmod":1679011200,"objectID":"d10a9092eed97f8b2efc349ec53b5205","permalink":"https://tanjunchen.github.io/post/2023-03-17-archsummit-servicemesh/","publishdate":"2023-03-17T00:00:00Z","readingtime":19,"relpermalink":"/post/2023-03-17-archsummit-servicemesh/","section":"post","summary":"调查 没有使用 Kubernetes 管理业务应用？ 没有使用 Service Mesh 进行服务治理？ 主要是做一个小调查，在生产环境没有使用 Kubernetes 进行容器应用编排，没有使用 Service Mesh 进行服务流量治理","tags":["istio","servicemesh","kubernetes"],"title":"演讲：Service Mesh 在百度大规模生产落地与实践","type":"post","url":"/post/2023-03-17-archsummit-servicemesh/","weight":0,"wordcount":9425},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1673740800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1673740800,"objectID":"1af3e3c4c505461fd16edfe458aee1ec","permalink":"https://tanjunchen.github.io/post/2023-01-15-cloud-native-question-1/","publishdate":"2023-01-15T00:00:00Z","readingtime":4,"relpermalink":"/post/2023-01-15-cloud-native-question-1/","section":"post","summary":"云原生时代是指企业和开发者开始广泛采用云原生技术的时期。云原生技术是一种软件开发方法，它鼓励将应用作为小型、独立的服务来构建和部署，这些服务","tags":["cloud native","kubernetes"],"title":"在云原生实践与探索道路上遇到的常见问题与解决方法 - 常见脚本（一）","type":"post","url":"/post/2023-01-15-cloud-native-question-1/","weight":0,"wordcount":1559},{"author":null,"categories":["TECHNOLOGY"],"content":"在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。随着科技的快速发展，程序员们不断迭代和创新，开辟出更多令人惊叹的可能性。本文将探讨程序员技术的重要性、当前的趋势以及持续学习的重要性。","date":1672531200,"description":"在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。随着科技的快速发展，程序员们不断迭代和创新，开辟出更多令人惊叹的可能性。本文将探讨程序员技术的重要性、当前的趋势以及持续学习的重要性。","dir":"post/","excerpt_html":"在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。随着科技的快速发展，程序员们不断迭代和创新，开辟出更多令人惊叹的可能性。本文将探讨程序员技术的重要性、当前的趋势以及持续学习的重要性。","excerpt_text":"在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。随着科技的快速发展，程序员们不断迭代和创新，开辟出更多令人惊叹的可能性。本文将探讨程序员技术的重要性、当前的趋势以及持续学习的重要性。","expirydate":-62135596800,"fuzzywordcount":1e3,"html":"在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。随着科技的快速发展，程序员们不断迭代和创新，开辟出更多令人惊叹的可能性。本文将探讨程序员技术的重要性、当前的趋势以及持续学习的重要性。","keywords":null,"kind":"page","lang":"en","lastmod":1672531200,"objectID":"53f52124b2db05fae9aa2ecf3fed8246","permalink":"https://tanjunchen.github.io/post/2023-01-01-chatgpt-article/","publishdate":"2023-01-01T00:00:00Z","readingtime":2,"relpermalink":"/post/2023-01-01-chatgpt-article/","section":"post","summary":"背景 在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。","tags":["AIGC"],"title":"程序员技术：探索创新的编码之道","type":"post","url":"/post/2023-01-01-chatgpt-article/","weight":0,"wordcount":970},{"author":null,"categories":["TECHNOLOGY"],"content":"Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见 https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc","date":1671494400,"description":"Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见 https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc","dir":"post/","excerpt_html":"Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见 https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc","excerpt_text":"Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见 https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc","expirydate":-62135596800,"fuzzywordcount":800,"html":"Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见 https://github.com/istio/proxy/blob/release-1.14/extensions/stats/plugin.cc","keywords":null,"kind":"page","lang":"en","lastmod":1671494400,"objectID":"3c3e98a23d699fa2679135a59280c9d7","permalink":"https://tanjunchen.github.io/post/2022-12-20-istio-envoyfilter/","publishdate":"2022-12-20T00:00:00Z","readingtime":2,"relpermalink":"/post/2022-12-20-istio-envoyfilter/","section":"post","summary":"序言 Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见stats-plugin.cc。Istio 安装时默认会在 istio-system 命名空间下部署 st","tags":["istio","kubernetes","microservice"],"title":"istio-system 命名空间下的 envoyfilter 有什么作用？","type":"post","url":"/post/2022-12-20-istio-envoyfilter/","weight":0,"wordcount":774},{"author":null,"categories":["TECHNOLOGY"],"content":"Cilium 是众所周知的云原生网络和安全公认的标准，被 Adobe、Bell Canada 和 IKEA 等公司以及许多提供托管 Kubernetes 平台（包括 Google Cloud 和 AWS 等）使用。Cilium 1.12 新版本中的主要功能由 Datadog、F5、Form3、Isovalent、Microsoft、Seznam.cz、纽约时报和许多其他贡献者提供。","date":1669852800,"description":"Cilium 是众所周知的云原生网络和安全公认的标准，被 Adobe、Bell Canada 和 IKEA 等公司以及许多提供托管 Kubernetes 平台（包括 Google Cloud 和 AWS 等）使用。Cilium 1.12 新版本中的主要功能由 Datadog、F5、Form3、Isovalent、Microsoft、Seznam.cz、纽约时报和许多其他贡献者提供。","dir":"post/","excerpt_html":"Cilium 是众所周知的云原生网络和安全公认的标准，被 Adobe、Bell Canada 和 IKEA 等公司以及许多提供托管 Kubernetes 平台（包括 Google Cloud 和 AWS 等）使用。Cilium 1.12 新版本中的主要功能由 Datadog、F5、Form3、Isovalent、Microsoft、Seznam.cz、纽约时报和许多其他贡献者提供。","excerpt_text":"Cilium 是众所周知的云原生网络和安全公认的标准，被 Adobe、Bell Canada 和 IKEA 等公司以及许多提供托管 Kubernetes 平台（包括 Google Cloud 和 AWS 等）使用。Cilium 1.12 新版本中的主要功能由 Datadog、F5、Form3、Isovalent、Microsoft、Seznam.cz、纽约时报和许多其他贡献者提供。","expirydate":-62135596800,"fuzzywordcount":1300,"html":"Cilium 是众所周知的云原生网络和安全公认的标准，被 Adobe、Bell Canada 和 IKEA 等公司以及许多提供托管 Kubernetes 平台（包括 Google Cloud 和 AWS 等）使用。Cilium 1.12 新版本中的主要功能由 Datadog、F5、Form3、Isovalent、Microsoft、Seznam.cz、纽约时报和许多其他贡献者提供。","keywords":null,"kind":"page","lang":"en","lastmod":1669852800,"objectID":"7163ede91b8eaf1d1451a4c3f468e1d7","permalink":"https://tanjunchen.github.io/post/2022-12-01-cilium-1.12-release/","publishdate":"2022-12-01T00:00:00Z","readingtime":3,"relpermalink":"/post/2022-12-01-cilium-1.12-release/","section":"post","summary":"前言 随着 Cilium 1.12 新版本发布，Cilium 引入了 Cilium Service Mesh，它是服务网格类型中的新类型，它使企业能够灵活地在 sidecar 模型或无 sidecar 模型中运行服务网格，并可","tags":["cilium","kubernetes","cilium mesh"],"title":"Cilium 1.12 GA：发布 Cilium Service Mesh 和企业级 Kubernetes 新功能","type":"post","url":"/post/2022-12-01-cilium-1.12-release/","weight":0,"wordcount":1211},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1669161600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":2500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1669161600,"objectID":"e35ed45addc2bc08cacd62890d75237d","permalink":"https://tanjunchen.github.io/post/2022-11-23-istio-questions-6/","publishdate":"2022-11-23T00:00:00Z","readingtime":5,"relpermalink":"/post/2022-11-23-istio-questions-6/","section":"post","summary":"服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布","tags":["istio"],"title":"使用 Istio 过程中遇到的常见问题与解决方法（六）","type":"post","url":"/post/2022-11-23-istio-questions-6/","weight":0,"wordcount":2428},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1669075200,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":4400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1669075200,"objectID":"de7c8613475ddca717195597a0db66a4","permalink":"https://tanjunchen.github.io/post/2022-11-22-istio-questions-5/","publishdate":"2022-11-22T00:00:00Z","readingtime":9,"relpermalink":"/post/2022-11-22-istio-questions-5/","section":"post","summary":"服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布","tags":["istio"],"title":"使用 Istio 过程中遇到的常见问题与解决方法（五）","type":"post","url":"/post/2022-11-22-istio-questions-5/","weight":0,"wordcount":4350},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1668988800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":6e3,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1668988800,"objectID":"37788d7a5db3ffb88f58b48827b35abb","permalink":"https://tanjunchen.github.io/post/2022-11-21-istio-questions-4/","publishdate":"2022-11-21T00:00:00Z","readingtime":12,"relpermalink":"/post/2022-11-21-istio-questions-4/","section":"post","summary":"服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布","tags":["istio"],"title":"使用 Istio 过程中遇到的常见问题与解决方法（四）","type":"post","url":"/post/2022-11-21-istio-questions-4/","weight":0,"wordcount":5965},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1668902400,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":4500,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1668902400,"objectID":"b6fd8566aceffb1c22aa1ea333a11563","permalink":"https://tanjunchen.github.io/post/2022-11-20-istio-questions-3/","publishdate":"2022-11-20T00:00:00Z","readingtime":9,"relpermalink":"/post/2022-11-20-istio-questions-3/","section":"post","summary":"服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布","tags":["istio"],"title":"使用 Istio 过程中遇到的常见问题与解决方法（三）","type":"post","url":"/post/2022-11-20-istio-questions-3/","weight":0,"wordcount":4437},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1668816e3,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":6400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1668816e3,"objectID":"52566d2a087a65561e585acd20f4fb00","permalink":"https://tanjunchen.github.io/post/2022-11-19-istio-questions-2/","publishdate":"2022-11-19T00:00:00Z","readingtime":13,"relpermalink":"/post/2022-11-19-istio-questions-2/","section":"post","summary":"服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布","tags":["istio"],"title":"使用 Istio 过程中遇到的常见问题与解决方法（二）","type":"post","url":"/post/2022-11-19-istio-questions-2/","weight":0,"wordcount":6378},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1668729600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":4e3,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1668729600,"objectID":"4fa75df2c7791e3421604bcb183075ad","permalink":"https://tanjunchen.github.io/post/2022-11-18-istio-questions-1/","publishdate":"2022-11-18T00:00:00Z","readingtime":8,"relpermalink":"/post/2022-11-18-istio-questions-1/","section":"post","summary":"服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布","tags":["istio"],"title":"使用 Istio 过程中遇到的常见问题与解决方法（一）","type":"post","url":"/post/2022-11-18-istio-questions-1/","weight":0,"wordcount":3954},{"author":null,"categories":["TECHNOLOGY"],"content":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标，这些指标是 Istio 核心指标，本文介绍如何对 Istio 核心指标配置监控告警。","date":1668038400,"description":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标，这些指标是 Istio 核心指标，本文介绍如何对 Istio 核心指标配置监控告警。","dir":"post/","excerpt_html":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标，这些指标是 Istio 核心指标，本文介绍如何对 Istio 核心指标配置监控告警。","excerpt_text":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标，这些指标是 Istio 核心指标，本文介绍如何对 Istio 核心指标配置监控告警。","expirydate":-62135596800,"fuzzywordcount":3600,"html":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标，这些指标是 Istio 核心指标，本文介绍如何对 Istio 核心指标配置监控告警。","keywords":null,"kind":"page","lang":"en","lastmod":1668038400,"objectID":"2ea99d7a1c0bea3e44e2cdd26ba6a0a5","permalink":"https://tanjunchen.github.io/post/2022-11-10-istio-metrics-alert/","publishdate":"2022-11-10T00:00:00Z","readingtime":8,"relpermalink":"/post/2022-11-10-istio-metrics-alert/","section":"post","summary":"部署 Istio 与周边组件 部署 Istio 参考 getting-started。 部署 Prometheus 参考 Querying Metrics from Prometheus。 部署 Grafana 参考 Visualizing Metrics with Grafana。 原生 Istio Grafana 监控","tags":["istio","kubernetes","microservice"],"title":"配置 Istio 核心指标监控告警","type":"post","url":"/post/2022-11-10-istio-metrics-alert/","weight":0,"wordcount":3543},{"author":null,"categories":["TECHNOLOGY"],"content":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标可以用来评估它们的性能和有效性。","date":1667260800,"description":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标可以用来评估它们的性能和有效性。","dir":"post/","excerpt_html":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标可以用来评估它们的性能和有效性。","excerpt_text":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标可以用来评估它们的性能和有效性。","expirydate":-62135596800,"fuzzywordcount":7700,"html":"Istio 是一个开源的服务网格平台，它通过控制平面和数据平面来管理微服务架构中的流量、安全性和监控等方面。控制平面和数据平面有一些关键的指标可以用来评估它们的性能和有效性。","keywords":null,"kind":"page","lang":"en","lastmod":1667260800,"objectID":"85360a7ac8856ea2f505644fdbb7fae4","permalink":"https://tanjunchen.github.io/post/2022-11-01-istio-metrics/","publishdate":"2022-11-01T00:00:00Z","readingtime":16,"relpermalink":"/post/2022-11-01-istio-metrics/","section":"post","summary":"部署 Istio 参考 文档 部署 Istio 集群，如下所示： ➜ istio-1.16.5 kubectl -n istio-system get pod NAME READY STATUS RESTARTS AGE istio-eastwestgateway-64fd87c956-8nlpg 1/1 Running 0 29h istiod-66c5ff9789-bsc75 1/1 Running 0 29h 部署 Prometheus 与 Grafana 参考 文档 部署 Prometheus，参考 文档 部署 Gr","tags":["istio","kubernetes","microservice"],"title":"Istio 控制平面与数据平面核心指标","type":"post","url":"/post/2022-11-01-istio-metrics/","weight":0,"wordcount":7686},{"author":null,"categories":["TECHNOLOGY"],"content":"2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目，Istio 扬帆加入 CNCF","date":1666915200,"description":"2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目，Istio 扬帆加入 CNCF","dir":"post/","excerpt_html":"2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目，Istio 扬帆加入 CNCF","excerpt_text":"2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目，Istio 扬帆加入 CNCF","expirydate":-62135596800,"fuzzywordcount":2e3,"html":"2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目，Istio 扬帆加入 CNCF","keywords":null,"kind":"page","lang":"en","lastmod":1666915200,"objectID":"577906e40c62e829b3591ddcd598cbe4","permalink":"https://tanjunchen.github.io/post/2022-10-28-istio-history/","publishdate":"2022-10-28T00:00:00Z","readingtime":4,"relpermalink":"/post/2022-10-28-istio-history/","section":"post","summary":"序言 2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目。Istio 扬帆加入 CNCF。","tags":["istio","kubernetes","microservice"],"title":"说道说道 Istio，重新扬帆加入 CNCF","type":"post","url":"/post/2022-10-28-istio-history/","weight":0,"wordcount":1904},{"author":null,"categories":["TECHNOLOGY"],"content":"Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系统调用、网络流量、文件系统空间使用等信息，有助于及时发现并解决系统问题","date":1664668800,"description":"Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系统调用、网络流量、文件系统空间使用等信息，有助于及时发现并解决系统问题","dir":"post/","excerpt_html":"Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系统调用、网络流量、文件系统空间使用等信息，有助于及时发现并解决系统问题","excerpt_text":"Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系统调用、网络流量、文件系统空间使用等信息，有助于及时发现并解决系统问题","expirydate":-62135596800,"fuzzywordcount":5700,"html":"Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系统调用、网络流量、文件系统空间使用等信息，有助于及时发现并解决系统问题","keywords":null,"kind":"page","lang":"en","lastmod":1664668800,"objectID":"18a6e9b10db986574bc7728fb786fd86","permalink":"https://tanjunchen.github.io/post/2022-10-02-linux-command/","publishdate":"2022-10-02T00:00:00Z","readingtime":12,"relpermalink":"/post/2022-10-02-linux-command/","section":"post","summary":"序言 Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系","tags":["Linux"],"title":"Linux 常见故障定位与性能分析操作命令","type":"post","url":"/post/2022-10-02-linux-command/","weight":0,"wordcount":5645},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1654905600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":6e3,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1654905600,"objectID":"e8f0a683ff6953052338f0e7d19a4a9b","permalink":"https://tanjunchen.github.io/post/2022-06-11-istio-packet-02/","publishdate":"2022-06-11T00:00:00Z","readingtime":12,"relpermalink":"/post/2022-06-11-istio-packet-02/","section":"post","summary":"在《Istio 中数据包的生命周期 - 上篇》文章中，我们学习了服务网格和 Istio 相关概念，Istio 提供流量管理、可观察性、安全性等功能。然后，我们深","tags":["istio"],"title":"Istio 中数据包的生命周期 - 下篇","type":"post","url":"/post/2022-06-11-istio-packet-02/","weight":0,"wordcount":5928},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1654041600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":4100,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1654041600,"objectID":"ce84536ca76694d523d353b474a10fb3","permalink":"https://tanjunchen.github.io/post/2022-06-01-istio-packet-01/","publishdate":"2022-06-01T00:00:00Z","readingtime":9,"relpermalink":"/post/2022-06-01-istio-packet-01/","section":"post","summary":"如果你从事系统后端研发相关工作，“服务网格”一词你或许一定听说过。Istio 过往一直被批评为过于复杂，但今天的 Istio 更加简单易用。 在本篇博客中，","tags":["istio"],"title":"Istio 中数据包的生命周期 - 上篇","type":"post","url":"/post/2022-06-01-istio-packet-01/","weight":0,"wordcount":4041},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1648339200,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1648339200,"objectID":"911dff0d7198a7a38bc6b57544ca0981","permalink":"https://tanjunchen.github.io/post/2022-03-27-multi-architecture/","publishdate":"2022-03-27T00:00:00Z","readingtime":8,"relpermalink":"/post/2022-03-27-multi-architecture/","section":"post","summary":"前言 在不同操作系统和处理器架构上运行应用是很普遍的需求，因此为不同平台单独构建发布版本是一种常见做法。 当我们用来开发应用的平台与部署的目标平","tags":["docker","architecture"],"title":"如何构建多架构多平台 Docker 镜像？","type":"post","url":"/post/2022-03-27-multi-architecture/","weight":0,"wordcount":3518},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1645228800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":5400,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1645228800,"objectID":"61cc76e53fc2b13576821040a96b8074","permalink":"https://tanjunchen.github.io/post/2022-02-19-istio-security/","publishdate":"2022-02-19T00:00:00Z","readingtime":11,"relpermalink":"/post/2022-02-19-istio-security/","section":"post","summary":"在这篇博客中，我将解释 Istio 如何解决诸如流量加密、提供灵活的服务访问控制、配置双向 TLS 和细粒度访问策略与审计等问题。 Istio 安全架构 Istio 服务网格发展历史如","tags":["istio","kubernetes","microservice"],"title":"Istio 服务网格如何处理安全问题","type":"post","url":"/post/2022-02-19-istio-security/","weight":0,"wordcount":5368},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1639785600,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":3600,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1639785600,"objectID":"70c01a196a35a143c111182d0a7d2bc5","permalink":"https://tanjunchen.github.io/post/2021-12-18-scheduling-framework/","publishdate":"2021-12-18T00:00:00Z","readingtime":7,"relpermalink":"/post/2021-12-18-scheduling-framework/","section":"post","summary":"架构设计 相关文档参见 Scheduling Framework。 前提 调度框架定义了一组扩展点，用户可以实现扩展点定义的接口来定义自己的调度逻辑，并将扩展注册到扩展","tags":["kubernetes"],"title":"调度框架 Scheduling Framework","type":"post","url":"/post/2021-12-18-scheduling-framework/","weight":0,"wordcount":3502},{"author":null,"categories":["TECHNOLOGY"],"content":"2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。该漏洞可通过 critical、error、warining、notice、info、debug等日志级别触发，只需部分日志内容可控，此漏洞波及大量开源组件，包括 ELK、 Apache 、Struts2、Apache Solr、Apache Druid、Apache Flink 等均受影响。目前漏洞细节已被公开，攻击者可利用该漏洞进行远程命令执行。","date":1639267200,"description":"2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。该漏洞可通过 critical、error、warining、notice、info、debug等日志级别触发，只需部分日志内容可控，此漏洞波及大量开源组件，包括 ELK、 Apache 、Struts2、Apache Solr、Apache Druid、Apache Flink 等均受影响。目前漏洞细节已被公开，攻击者可利用该漏洞进行远程命令执行。","dir":"post/","excerpt_html":"2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。该漏洞可通过 critical、error、warining、notice、info、debug等日志级别触发，只需部分日志内容可控，此漏洞波及大量开源组件，包括 ELK、 Apache 、Struts2、Apache Solr、Apache Druid、Apache Flink 等均受影响。目前漏洞细节已被公开，攻击者可利用该漏洞进行远程命令执行。","excerpt_text":"2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。该漏洞可通过 critical、error、warining、notice、info、debug等日志级别触发，只需部分日志内容可控，此漏洞波及大量开源组件，包括 ELK、 Apache 、Struts2、Apache Solr、Apache Druid、Apache Flink 等均受影响。目前漏洞细节已被公开，攻击者可利用该漏洞进行远程命令执行。","expirydate":-62135596800,"fuzzywordcount":4500,"html":"2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在递归解析功能，攻击者可直接构造恶意请求，触发远程代码执行漏洞。该漏洞可通过 critical、error、warining、notice、info、debug等日志级别触发，只需部分日志内容可控，此漏洞波及大量开源组件，包括 ELK、 Apache 、Struts2、Apache Solr、Apache Druid、Apache Flink 等均受影响。目前漏洞细节已被公开，攻击者可利用该漏洞进行远程命令执行。","keywords":null,"kind":"page","lang":"en","lastmod":1639267200,"objectID":"9fbe9fd699b7205693a096cda4078e0c","permalink":"https://tanjunchen.github.io/post/2021-12-12-apache-log4j2-security/","publishdate":"2021-12-12T00:00:00Z","readingtime":9,"relpermalink":"/post/2021-12-12-apache-log4j2-security/","section":"post","summary":"漏洞说明 2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在","tags":["java"],"title":"解析 Apache Log4j 远程代码注入漏洞","type":"post","url":"/post/2021-12-12-apache-log4j2-security/","weight":0,"wordcount":4493},{"author":null,"categories":["TECHNOLOGY"],"content":"这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。","date":1638576e3,"description":"这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。","dir":"post/","excerpt_html":"这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。","excerpt_text":"这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。","expirydate":-62135596800,"fuzzywordcount":800,"html":"这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。","keywords":null,"kind":"page","lang":"en","lastmod":1638576e3,"objectID":"396d5479ca060c745d9eef4ae0e6d442","permalink":"https://tanjunchen.github.io/post/2021-12-04-wasm-envoyfilter/","publishdate":"2021-12-04T00:00:00Z","readingtime":2,"relpermalink":"/post/2021-12-04-wasm-envoyfilter/","section":"post","summary":"Wasm C++ Filter 这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。 通过该文章完成构建我们的 C++","tags":["wasm","istio","envoyfilter"],"title":"Wasm C++ Filter 拓展 Envoy","type":"post","url":"/post/2021-12-04-wasm-envoyfilter/","weight":0,"wordcount":796},{"author":null,"categories":["TECHNOLOGY"],"content":"Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注入、速率限制、授权等。而这些功能都是通过内置的 http 过滤器 实现的。现在，我们我们介绍一个特殊的过滤器 - WASM 过滤器。","date":1638057600,"description":"Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注入、速率限制、授权等。而这些功能都是通过内置的 http 过滤器 实现的。现在，我们我们介绍一个特殊的过滤器 - WASM 过滤器。","dir":"post/","excerpt_html":"Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注入、速率限制、授权等。而这些功能都是通过内置的 http 过滤器 实现的。现在，我们我们介绍一个特殊的过滤器 - WASM 过滤器。","excerpt_text":"Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注入、速率限制、授权等。而这些功能都是通过内置的 http 过滤器 实现的。现在，我们我们介绍一个特殊的过滤器 - WASM 过滤器。","expirydate":-62135596800,"fuzzywordcount":1400,"html":"Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注入、速率限制、授权等。而这些功能都是通过内置的 http 过滤器 实现的。现在，我们我们介绍一个特殊的过滤器 - WASM 过滤器。","keywords":null,"kind":"page","lang":"en","lastmod":1638057600,"objectID":"8555528ce8d9743e1acc2467947c9002","permalink":"https://tanjunchen.github.io/post/2021-11-28-golang-envoy-wam/","publishdate":"2021-11-28T00:00:00Z","readingtime":3,"relpermalink":"/post/2021-11-28-golang-envoy-wam/","section":"post","summary":"介绍 Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注","tags":["wasm","istio","wasm"],"title":"使用 Golang 扩展 Envoy 代理 - WASM 过滤器","type":"post","url":"/post/2021-11-28-golang-envoy-wam/","weight":0,"wordcount":1377},{"author":null,"categories":["TECHNOLOGY"],"content":"操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。","date":1637539200,"description":"操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。","dir":"post/","excerpt_html":"操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。","excerpt_text":"操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。","expirydate":-62135596800,"fuzzywordcount":11500,"html":"操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供需的优先次序、控制输入设备与输出设备、操作网络与管理文件系统等基本事务。","keywords":null,"kind":"page","lang":"en","lastmod":1637539200,"objectID":"5c2bd1039ddafc604550840cbe239cbc","permalink":"https://tanjunchen.github.io/post/2021-11-22-os-something/","publishdate":"2021-11-22T00:00:00Z","readingtime":23,"relpermalink":"/post/2021-11-22-os-something/","section":"post","summary":"操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供","tags":["linux"],"title":"科普操作系统与芯片那些事儿","type":"post","url":"/post/2021-11-22-os-something/","weight":0,"wordcount":11409},{"author":null,"categories":["TECHNOLOGY"],"content":"本文我们将讨论 Kubernetes 的 Ingress 资源和 Ingress 控制器。Ingress 控制器是一个控制器，它监视 Kubernetes API 服务器上 Ingress 资源的更新，并相应地重新配置 Ingress 负载均衡器。","date":1636070400,"description":"本文我们将讨论 Kubernetes 的 Ingress 资源和 Ingress 控制器。Ingress 控制器是一个控制器，它监视 Kubernetes API 服务器上 Ingress 资源的更新，并相应地重新配置 Ingress 负载均衡器。","dir":"post/","excerpt_html":"本文我们将讨论 Kubernetes 的 Ingress 资源和 Ingress 控制器。Ingress 控制器是一个控制器，它监视 Kubernetes API 服务器上 Ingress 资源的更新，并相应地重新配置 Ingress 负载均衡器。","excerpt_text":"本文我们将讨论 Kubernetes 的 Ingress 资源和 Ingress 控制器。Ingress 控制器是一个控制器，它监视 Kubernetes API 服务器上 Ingress 资源的更新，并相应地重新配置 Ingress 负载均衡器。","expirydate":-62135596800,"fuzzywordcount":2700,"html":"本文我们将讨论 Kubernetes 的 Ingress 资源和 Ingress 控制器。Ingress 控制器是一个控制器，它监视 Kubernetes API 服务器上 Ingress 资源的更新，并相应地重新配置 Ingress 负载均衡器。","keywords":null,"kind":"page","lang":"en","lastmod":1636070400,"objectID":"0acac464fd9284d0786fd9f9bad8dbcb","permalink":"https://tanjunchen.github.io/post/2021-11-05-kubernetes-pod-part04/","publishdate":"2021-11-05T00:00:00Z","readingtime":6,"relpermalink":"/post/2021-11-05-kubernetes-pod-part04/","section":"post","summary":"最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam","tags":["kubernetes"],"title":"Kubernetes 中数据包的生命周期 Ingress 等处理七层流量（Part4）","type":"post","url":"/post/2021-11-05-kubernetes-pod-part04/","weight":0,"wordcount":2610},{"author":null,"categories":["TECHNOLOGY"],"content":"本文我们将讨论 Kubernetes CNI Calico 核心组件 CNI 的基础知识，如核心模块、路由模式、demo 示例、要求等","date":1635465600,"description":"本文我们将讨论 Kubernetes CNI Calico 核心组件 CNI 的基础知识，如核心模块、路由模式、demo 示例、要求等","dir":"post/","excerpt_html":"本文我们将讨论 Kubernetes CNI Calico 核心组件 CNI 的基础知识，如核心模块、路由模式、demo 示例、要求等","excerpt_text":"本文我们将讨论 Kubernetes CNI Calico 核心组件 CNI 的基础知识，如核心模块、路由模式、demo 示例、要求等","expirydate":-62135596800,"fuzzywordcount":9100,"html":"本文我们将讨论 Kubernetes CNI Calico 核心组件 CNI 的基础知识，如核心模块、路由模式、demo 示例、要求等","keywords":null,"kind":"page","lang":"en","lastmod":1635465600,"objectID":"26678be908008e8d519769ee51a7a10d","permalink":"https://tanjunchen.github.io/post/2021-10-29-kubernetes-pod-part02/","publishdate":"2021-10-29T00:00:00Z","readingtime":19,"relpermalink":"/post/2021-10-29-kubernetes-pod-part02/","section":"post","summary":"最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam","tags":["kubernetes"],"title":"Kubernetes 中数据包的生命周期 CNI Calico（Part2）","type":"post","url":"/post/2021-10-29-kubernetes-pod-part02/","weight":0,"wordcount":9050},{"author":null,"categories":["TECHNOLOGY"],"content":"本文我们将讨论 Kubernetes 的 Linux 网络、Namespace 与容器网络 CNI 等基础知识。如 Linux 命名空间、容器网络基础知识、Pod 网络命令空间、什么是 CNI？等","date":1634860800,"description":"本文我们将讨论 Kubernetes 的 Linux 网络、Namespace 与容器网络 CNI 等基础知识。如 Linux 命名空间、容器网络基础知识、Pod 网络命令空间、什么是 CNI？等","dir":"post/","excerpt_html":"本文我们将讨论 Kubernetes 的 Linux 网络、Namespace 与容器网络 CNI 等基础知识。如 Linux 命名空间、容器网络基础知识、Pod 网络命令空间、什么是 CNI？等","excerpt_text":"本文我们将讨论 Kubernetes 的 Linux 网络、Namespace 与容器网络 CNI 等基础知识。如 Linux 命名空间、容器网络基础知识、Pod 网络命令空间、什么是 CNI？等","expirydate":-62135596800,"fuzzywordcount":4200,"html":"本文我们将讨论 Kubernetes 的 Linux 网络、Namespace 与容器网络 CNI 等基础知识。如 Linux 命名空间、容器网络基础知识、Pod 网络命令空间、什么是 CNI？等","keywords":null,"kind":"page","lang":"en","lastmod":1634860800,"objectID":"9b51cac4b2a3a800db72d01d7ff39860","permalink":"https://tanjunchen.github.io/post/2021-10-22-kubernetes-pod-part01/","publishdate":"2021-10-22T00:00:00Z","readingtime":9,"relpermalink":"/post/2021-10-22-kubernetes-pod-part01/","section":"post","summary":"最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam","tags":["kubernetes"],"title":"Kubernetes 中数据包的生命周期 网络基础知识（Part1）","type":"post","url":"/post/2021-10-22-kubernetes-pod-part01/","weight":0,"wordcount":4171},{"author":null,"categories":["TECHNOLOGY"],"content":"主要内容如下所示：iptables 规则、Pod 到 Pod、Pod 到 External、Pod 到 Service、External Traffic Policy、Kube-Proxy等","date":1634256e3,"description":"主要内容如下所示：iptables 规则、Pod 到 Pod、Pod 到 External、Pod 到 Service、External Traffic Policy、Kube-Proxy等","dir":"post/","excerpt_html":"主要内容如下所示：iptables 规则、Pod 到 Pod、Pod 到 External、Pod 到 Service、External Traffic Policy、Kube-Proxy等","excerpt_text":"主要内容如下所示：iptables 规则、Pod 到 Pod、Pod 到 External、Pod 到 Service、External Traffic Policy、Kube-Proxy等","expirydate":-62135596800,"fuzzywordcount":5300,"html":"主要内容如下所示：iptables 规则、Pod 到 Pod、Pod 到 External、Pod 到 Service、External Traffic Policy、Kube-Proxy等","keywords":null,"kind":"page","lang":"en","lastmod":1634256e3,"objectID":"60dc444f91f67249b6321b3cdab75f83","permalink":"https://tanjunchen.github.io/post/2021-10-15-kubernetes-pod-part03/","publishdate":"2021-10-15T00:00:00Z","readingtime":11,"relpermalink":"/post/2021-10-15-kubernetes-pod-part03/","section":"post","summary":"最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam","tags":["kubernetes"],"title":"Kubernetes 中数据包的生命周期 Kube-Proxy（Part3）","type":"post","url":"/post/2021-10-15-kubernetes-pod-part03/","weight":0,"wordcount":5280},{"author":null,"categories":["TECHNOLOGY"],"content":"Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在集群上部署，而是使用更高级的抽象资源，比如 DeployMent、StatefulSet 等。深入理解 Pod 对于排查问题是很重要的。","date":1633046400,"description":"Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在集群上部署，而是使用更高级的抽象资源，比如 DeployMent、StatefulSet 等。深入理解 Pod 对于排查问题是很重要的。","dir":"post/","excerpt_html":"Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在集群上部署，而是使用更高级的抽象资源，比如 DeployMent、StatefulSet 等。深入理解 Pod 对于排查问题是很重要的。","excerpt_text":"Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在集群上部署，而是使用更高级的抽象资源，比如 DeployMent、StatefulSet 等。深入理解 Pod 对于排查问题是很重要的。","expirydate":-62135596800,"fuzzywordcount":2400,"html":"Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在集群上部署，而是使用更高级的抽象资源，比如 DeployMent、StatefulSet 等。深入理解 Pod 对于排查问题是很重要的。","keywords":null,"kind":"page","lang":"en","lastmod":1633046400,"objectID":"6007c69441556103a600b6d13e702aae","permalink":"https://tanjunchen.github.io/post/2021-10-01-kubernetes-pod-lifecycle/","publishdate":"2021-10-01T00:00:00Z","readingtime":5,"relpermalink":"/post/2021-10-01-kubernetes-pod-lifecycle/","section":"post","summary":"Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在","tags":["kubernetes"],"title":"Kubernetes 中 Pod 生命周期","type":"post","url":"/post/2021-10-01-kubernetes-pod-lifecycle/","weight":0,"wordcount":2303},{"author":null,"categories":["TECHNOLOGY"],"content":"1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与安全地使用。","date":1625097600,"description":"1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与安全地使用。","dir":"post/","excerpt_html":"1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与安全地使用。","excerpt_text":"1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与安全地使用。","expirydate":-62135596800,"fuzzywordcount":2700,"html":"1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与安全地使用。","keywords":null,"kind":"page","lang":"en","lastmod":1625097600,"objectID":"8f773debe21359b7d1877b6ced52a45b","permalink":"https://tanjunchen.github.io/post/2021-07-01-istio-1.9/","publishdate":"2021-07-01T00:00:00Z","readingtime":6,"relpermalink":"/post/2021-07-01-istio-1.9/","section":"post","summary":"1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与","tags":["istio"],"title":"istio 1.9.0 解读报告 - day2 操作","type":"post","url":"/post/2021-07-01-istio-1.9/","weight":0,"wordcount":2675},{"author":null,"categories":["TECHNOLOGY"],"content":"Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。","date":1619827200,"description":"Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。","dir":"post/","excerpt_html":"Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。","excerpt_text":"Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。","expirydate":-62135596800,"fuzzywordcount":1600,"html":"Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。","keywords":null,"kind":"page","lang":"en","lastmod":1619827200,"objectID":"e72c989a0b17e0b12781a612c7918cff","permalink":"https://tanjunchen.github.io/post/2021-05-01-istio-solo-io-wasm/","publishdate":"2021-05-01T00:00:00Z","readingtime":4,"relpermalink":"/post/2021-05-01-istio-solo-io-wasm/","section":"post","summary":"Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。 使用 wasme 拓展 istio-proxy 数据平面 安装 wasme 构建工具 curl -sL https://run.solo.io/wasme/install | sh","tags":["istio"],"title":"使用 wasm 拓展 istio-proxy 数据面","type":"post","url":"/post/2021-05-01-istio-solo-io-wasm/","weight":0,"wordcount":1517},{"author":null,"categories":["TECHNOLOGY"],"content":"Istio 集群通过 workloadentry 将虚拟机中的服务集成到网格中，从而使虚拟机中的服务可以享受 Mesh 的红利。","date":1606694400,"description":"Istio 集群通过 workloadentry 将虚拟机中的服务集成到网格中，从而使虚拟机中的服务可以享受 Mesh 的红利。","dir":"post/","excerpt_html":"Istio 集群通过 workloadentry 将虚拟机中的服务集成到网格中，从而使虚拟机中的服务可以享受 Mesh 的红利。","excerpt_text":"Istio 集群通过 workloadentry 将虚拟机中的服务集成到网格中，从而使虚拟机中的服务可以享受 Mesh 的红利。","expirydate":-62135596800,"fuzzywordcount":1100,"html":"Istio 集群通过 workloadentry 将虚拟机中的服务集成到网格中，从而使虚拟机中的服务可以享受 Mesh 的红利。","keywords":null,"kind":"page","lang":"en","lastmod":1606694400,"objectID":"b34b7b8d1816a6c206f7ca6290840418","permalink":"https://tanjunchen.github.io/post/2020-11-30-istio-support-vm/","publishdate":"2020-11-30T00:00:00Z","readingtime":3,"relpermalink":"/post/2020-11-30-istio-support-vm/","section":"post","summary":"环境 K8s 版本：1.17.2 Istio 版本：1.8.0 CentOS 版本：8.0（要求Glibc大于等于 2.18） 查看机器的 glibc 版本： ldd --version ldd (GNU libc) 2.18 Copyright (C) 2013 Free Software Foundation, Inc. This is free","tags":["istio"],"title":"istio 1.8.0 支持 VM 虚拟机验证","type":"post","url":"/post/2020-11-30-istio-support-vm/","weight":0,"wordcount":1018},{"author":null,"categories":["TECHNOLOGY"],"content":"备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19（从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本）","date":1605744e3,"description":"备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19（从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本）","dir":"post/","excerpt_html":"备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19（从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本）","excerpt_text":"备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19（从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本）","expirydate":-62135596800,"fuzzywordcount":4900,"html":"备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19（从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本）","keywords":null,"kind":"page","lang":"en","lastmod":1605744e3,"objectID":"9adc2eb7fe1e90994ccc58be26d09392","permalink":"https://tanjunchen.github.io/post/2020-11-19-istio-1.8/","publishdate":"2020-11-19T00:00:00Z","readingtime":10,"relpermalink":"/post/2020-11-19-istio-1.8/","section":"post","summary":"备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19(从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本)。 Istio 1.8 解读 - 用户至上 安装与升级 Istio 1.8 开始使用","tags":["istio"],"title":"istio 1.8.0 解读报告 - 用户至上","type":"post","url":"/post/2020-11-19-istio-1.8/","weight":0,"wordcount":4881},{"author":null,"categories":["TECHNOLOGY"],"content":"为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步?","date":1602460800,"description":"为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步?","dir":"post/","excerpt_html":"为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步?","excerpt_text":"为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步?","expirydate":-62135596800,"fuzzywordcount":1600,"html":"为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步?","keywords":null,"kind":"page","lang":"en","lastmod":1602460800,"objectID":"950ddd58917929c31c7ef9045cd261fa","permalink":"https://tanjunchen.github.io/post/2020-10-12-talk-about-kubernetes/","publishdate":"2020-10-12T00:00:00Z","readingtime":4,"relpermalink":"/post/2020-10-12-talk-about-kubernetes/","section":"post","summary":"为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步? 6 年前，Docker 横空出世。开发人员愉快地将其从 VM 上运行的应用程序移至 Docker，尽管遇到了","tags":["opensource","kubernetes"],"title":"浅谈 Kubernetes","type":"post","url":"/post/2020-10-12-talk-about-kubernetes/","weight":0,"wordcount":1511},{"author":null,"categories":["TECHNOLOGY"],"content":"在如今的软件设计，架构及开发中，开源扮演着越来越重要的角色。作为开发工程师，服务器、数据库、各种编程语言和框架的源代码，我们可以随时利用这些开源技术实现自己的业务要求。方便且免费地使用这些技术，当然离不开上述各种技术的开源。当今世界，这是一个开源的时代，所以，我们应该主动拥抱开源，工作之余了解与学习开源社区那些事。","date":1601942400,"description":"在如今的软件设计，架构及开发中，开源扮演着越来越重要的角色。作为开发工程师，服务器、数据库、各种编程语言和框架的源代码，我们可以随时利用这些开源技术实现自己的业务要求。方便且免费地使用这些技术，当然离不开上述各种技术的开源。当今世界，这是一个开源的时代，所以，我们应该主动拥抱开源，工作之余了解与学习开源社区那些事。","dir":"post/","excerpt_html":"在如今的软件设计，架构及开发中，开源扮演着越来越重要的角色。作为开发工程师，服务器、数据库、各种编程语言和框架的源代码，我们可以随时利用这些开源技术实现自己的业务要求。方便且免费地使用这些技术，当然离不开上述各种技术的开源。当今世界，这是一个开源的时代，所以，我们应该主动拥抱开源，工作之余了解与学习开源社区那些事。","excerpt_text":"在如今的软件设计，架构及开发中，开源扮演着越来越重要的角色。作为开发工程师，服务器、数据库、各种编程语言和框架的源代码，我们可以随时利用这些开源技术实现自己的业务要求。方便且免费地使用这些技术，当然离不开上述各种技术的开源。当今世界，这是一个开源的时代，所以，我们应该主动拥抱开源，工作之余了解与学习开源社区那些事。","expirydate":-62135596800,"fuzzywordcount":4900,"html":"在如今的软件设计，架构及开发中，开源扮演着越来越重要的角色。作为开发工程师，服务器、数据库、各种编程语言和框架的源代码，我们可以随时利用这些开源技术实现自己的业务要求。方便且免费地使用这些技术，当然离不开上述各种技术的开源。当今世界，这是一个开源的时代，所以，我们应该主动拥抱开源，工作之余了解与学习开源社区那些事。","keywords":null,"kind":"page","lang":"en","lastmod":1601942400,"objectID":"272d0243fe736001d138b2658bd64da0","permalink":"https://tanjunchen.github.io/post/2020-10-06-participate-community/","publishdate":"2020-10-06T00:00:00Z","readingtime":10,"relpermalink":"/post/2020-10-06-participate-community/","section":"post","summary":"介绍 【百度百科】开源社区又称开放源代码社区，一般由拥有共同兴趣爱好的人所组成，根据相应的开源软件许可证协议公布软件源代码的网络平台，同时也为","tags":["opensource"],"title":"如何参与 Kubernetes 开源社区","type":"post","url":"/post/2020-10-06-participate-community/","weight":0,"wordcount":4854},{"author":null,"categories":["TECHNOLOGY"],"content":"摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。重定向操作由位于每个节点上的 kube-proxy 执行。","date":1601596800,"description":"摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。重定向操作由位于每个节点上的 kube-proxy 执行。","dir":"post/","excerpt_html":"摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。重定向操作由位于每个节点上的 kube-proxy 执行。","excerpt_text":"摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。重定向操作由位于每个节点上的 kube-proxy 执行。","expirydate":-62135596800,"fuzzywordcount":3400,"html":"摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。重定向操作由位于每个节点上的 kube-proxy 执行。","keywords":null,"kind":"page","lang":"en","lastmod":1601596800,"objectID":"6d3236e4be0e83575433013fe662b7c2","permalink":"https://tanjunchen.github.io/post/2020-10-02-kube-proxy-01/","publishdate":"2020-10-02T00:00:00Z","readingtime":7,"relpermalink":"/post/2020-10-02-kube-proxy-01/","section":"post","summary":"摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。 重定向操作由位于每个节点上的 kube-proxy 执行。 在这篇文章中，我们","tags":["iptables","kubernetes"],"title":"初识 kube-proxy（入门篇）","type":"post","url":"/post/2020-10-02-kube-proxy-01/","weight":0,"wordcount":3345},{"author":null,"categories":["TECHNOLOGY"],"content":"根据 istio 文档可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像包编译。","date":1588291200,"description":"根据 istio 文档可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像包编译。","dir":"post/","excerpt_html":"根据 istio 文档可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像包编译。","excerpt_text":"根据 istio 文档可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像包编译。","expirydate":-62135596800,"fuzzywordcount":2100,"html":"根据 istio 文档可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像包编译。","keywords":null,"kind":"page","lang":"en","lastmod":1588291200,"objectID":"f9699cad134e64f22ed56568ea2b3cac","permalink":"https://tanjunchen.github.io/post/2020-05-01-istio-1.6-compile/","publishdate":"2020-05-01T00:00:00Z","readingtime":5,"relpermalink":"/post/2020-05-01-istio-1.6-compile/","section":"post","summary":"根据 istio 文档 可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像工具包编译与构建。 编译 istio 1.6.14 centos 7 rpm 依赖包 istio 1.6.x 系列版本","tags":["istio"],"title":"编译与构建 istio-1.6.14 镜像","type":"post","url":"/post/2020-05-01-istio-1.6-compile/","weight":0,"wordcount":2089},{"author":null,"categories":["TECHNOLOGY"],"content":"为 Kubernetes 应用程序开发人员认证考试做好准备的练习题，高效通过 CKAD 考试","date":1584144e3,"description":"为 Kubernetes 应用程序开发人员认证考试做好准备的练习题，高效通过 CKAD 考试","dir":"post/","excerpt_html":"为 Kubernetes 应用程序开发人员认证考试做好准备的练习题，高效通过 CKAD 考试","excerpt_text":"为 Kubernetes 应用程序开发人员认证考试做好准备的练习题，高效通过 CKAD 考试","expirydate":-62135596800,"fuzzywordcount":4700,"html":"为 Kubernetes 应用程序开发人员认证考试做好准备的练习题，高效通过 CKAD 考试","keywords":null,"kind":"page","lang":"en","lastmod":1584144e3,"objectID":"3dbf857236ad80ec752e395d3f0bbc73","permalink":"https://tanjunchen.github.io/post/2020-03-14-cka-practice/","publishdate":"2020-03-14T00:00:00Z","readingtime":10,"relpermalink":"/post/2020-03-14-cka-practice/","section":"post","summary":"介绍 Kubernetes 是一个开源系统，用于自动化和容器化部署、扩展和管理应用程序。CNCF/Linux 基金会针对 kubernetes 技能的开发人员提供职能考试，考试内容主要包","tags":["ckad","kubernetes"],"title":"高效通过 Kubernetes CKAD 考试","type":"post","url":"/post/2020-03-14-cka-practice/","weight":0,"wordcount":4651},{"author":null,"categories":["TECHNOLOGY"],"content":"俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。","date":1566086400,"description":"俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。","dir":"post/","excerpt_html":"俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。","excerpt_text":"俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。","expirydate":-62135596800,"fuzzywordcount":4100,"html":"俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。","keywords":null,"kind":"page","lang":"en","lastmod":1566086400,"objectID":"65bfe3efe638dcd7f197279035e61ad4","permalink":"https://tanjunchen.github.io/post/2019-08-18-java-jvm/","publishdate":"2019-08-18T00:00:00Z","readingtime":9,"relpermalink":"/post/2019-08-18-java-jvm/","section":"post","summary":"俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。为什么我们在编写Java代码","tags":["java"],"title":"浅析 Java JVM","type":"post","url":"/post/2019-08-18-java-jvm/","weight":0,"wordcount":4058},{"author":null,"categories":["THINK"],"content":"2019 年了，新的一年，祝大家身体健康，平平安安，万事如意，红红火火，财运滚滚。","date":1549324800,"description":"2019 年了，新的一年，祝大家身体健康，平平安安，万事如意，红红火火，财运滚滚。","dir":"post/","excerpt_html":"2019 年了，新的一年，祝大家身体健康，平平安安，万事如意，红红火火，财运滚滚。","excerpt_text":"2019 年了，新的一年，祝大家身体健康，平平安安，万事如意，红红火火，财运滚滚。","expirydate":-62135596800,"fuzzywordcount":900,"html":"2019 年了，新的一年，祝大家身体健康，平平安安，万事如意，红红火火，财运滚滚。","keywords":null,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"50759c034622490ff30877bd03cf5d1d","permalink":"https://tanjunchen.github.io/post/2019-02-05-happy-new-year/","publishdate":"2019-02-05T00:00:00Z","readingtime":2,"relpermalink":"/post/2019-02-05-happy-new-year/","section":"post","summary":"在这新的一年里，愿你找到内心的宁静，拥抱生活的美好。愿你心中充满希望，勇敢迎接新的挑战。 愿你笑口常开，忘记忧愁和烦恼。愿你在每一个黎明，都能","tags":["mind"],"title":"2019 新年快乐（Happy New Year）","type":"post","url":"/post/2019-02-05-happy-new-year/","weight":0,"wordcount":817},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1537488e3,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1537488e3,"objectID":"899d5259059f659162cffd0cd7f1c330","permalink":"https://tanjunchen.github.io/post/2018-09-21-python-flex-flash/","publishdate":"2018-09-21T00:00:00Z","readingtime":2,"relpermalink":"/post/2018-09-21-python-flex-flash/","section":"post","summary":"最近发现了一个网站中国农业信息网，他有个数据请求是以 amf 的方式请求数据，以前没有遇到过。所以网上了解一下，找到了python 中的第三方包 pya","tags":["python"],"title":"Python 抓取 Flex (Flash) 技术数据传输","type":"post","url":"/post/2018-09-21-python-flex-flash/","weight":0,"wordcount":780},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":153576e4,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":1300,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":153576e4,"objectID":"14ad4d17751a4adae2f9820a7b3bc5f3","permalink":"https://tanjunchen.github.io/post/2018-09-01-python-bj-house-price/","publishdate":"2018-09-01T00:00:00Z","readingtime":3,"relpermalink":"/post/2018-09-01-python-bj-house-price/","section":"post","summary":"前一段时间刚接触 Python，为了学习 Python 基础语法，我使用 Python 爬取了北京的网站租房信息，一周前北京的出租房屋还有将近 1.4 万套，然而最近一两天重新爬","tags":["python"],"title":"Python 揭秘北京房租","type":"post","url":"/post/2018-09-01-python-bj-house-price/","weight":0,"wordcount":1201},{"author":null,"categories":["TECHNOLOGY"],"content":"","date":1534636800,"description":"","dir":"post/","excerpt_html":"","excerpt_text":"","expirydate":-62135596800,"fuzzywordcount":800,"html":"","keywords":null,"kind":"page","lang":"en","lastmod":1534636800,"objectID":"9adbdc604c7aa786e2337bf324165834","permalink":"https://tanjunchen.github.io/post/2018-08-19-springboot/","publishdate":"2018-08-19T00:00:00Z","readingtime":2,"relpermalink":"/post/2018-08-19-springboot/","section":"post","summary":"最近接触到 Spring Boot，让我们一起探讨这个很火的家伙吧！！！ 什么是 Spring Boot? Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开","tags":["java","spring"],"title":"初识 Spring Boot","type":"post","url":"/post/2018-08-19-springboot/","weight":0,"wordcount":704},{"author":null,"categories":["TECHNOLOGY"],"content":"Linus(linux之父)花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git 雏形。","date":1533081600,"description":"Linus(linux之父)花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git 雏形。","dir":"post/","excerpt_html":"Linus(linux之父)花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git 雏形。","excerpt_text":"Linus(linux之父)花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git 雏形。","expirydate":-62135596800,"fuzzywordcount":4800,"html":"Linus(linux之父)花了两周时间自己用 C 写了一个分布式版本控制系统，这就是 Git 雏形。","keywords":null,"kind":"page","lang":"en","lastmod":1533081600,"objectID":"b8605ce7963fb878157520edb82c103c","permalink":"https://tanjunchen.github.io/post/2018-08-01-git-learn/","publishdate":"2018-08-01T00:00:00Z","readingtime":10,"relpermalink":"/post/2018-08-01-git-learn/","section":"post","summary":"Git 概念 Git 是目前世界上最先进的分布式版本控制系统，版本控制系统主要分为：CVS(集中式的版本控制系统)、SVN(集中式版本控制系统)、BitK","tags":["git"],"title":"初步浅析 Git 教程","type":"post","url":"/post/2018-08-01-git-learn/","weight":0,"wordcount":4792},{"author":null,"categories":["THINK"],"content":"根据英国天空新闻等多家媒体的报道，史蒂芬霍金去世，享年76岁。霍金毕业于牛津大学（University of Oxford）和剑桥大学（University of Cambridge），并获剑桥大学博士学位。","date":1521417600,"description":"根据英国天空新闻等多家媒体的报道，史蒂芬霍金去世，享年76岁。霍金毕业于牛津大学（University of Oxford）和剑桥大学（University of Cambridge），并获剑桥大学博士学位。","dir":"post/","excerpt_html":"根据英国天空新闻等多家媒体的报道，史蒂芬霍金去世，享年76岁。霍金毕业于牛津大学（University of Oxford）和剑桥大学（University of Cambridge），并获剑桥大学博士学位。","excerpt_text":"根据英国天空新闻等多家媒体的报道，史蒂芬霍金去世，享年76岁。霍金毕业于牛津大学（University of Oxford）和剑桥大学（University of Cambridge），并获剑桥大学博士学位。","expirydate":-62135596800,"fuzzywordcount":2200,"html":"根据英国天空新闻等多家媒体的报道，史蒂芬霍金去世，享年76岁。霍金毕业于牛津大学（University of Oxford）和剑桥大学（University of Cambridge），并获剑桥大学博士学位。","keywords":null,"kind":"page","lang":"en","lastmod":1521417600,"objectID":"9be096b29773a23990ea543b58d777fa","permalink":"https://tanjunchen.github.io/post/2018-03-19-stephen-william-hawking/","publishdate":"2018-03-19T00:00:00Z","readingtime":5,"relpermalink":"/post/2018-03-19-stephen-william-hawking/","section":"post","summary":"旅程 1959 年 17 岁的霍金入读牛津大学的大学学院攻读自然科学，用了很少时间而得到一等荣誉学位，随后转读剑桥大学研究宇宙学。 1963 年，21 岁的他不幸被诊断","tags":["mind"],"title":"史蒂芬·霍金的生平","type":"post","url":"/post/2018-03-19-stephen-william-hawking/","weight":0,"wordcount":2148},{"author":null,"categories":["THINK"],"content":"年龄歧视是软件开发行业中会面临的职业问题吗?","date":1520208e3,"description":"年龄歧视是软件开发行业中会面临的职业问题吗?","dir":"post/","excerpt_html":"年龄歧视是软件开发行业中会面临的职业问题吗?","excerpt_text":"年龄歧视是软件开发行业中会面临的职业问题吗?","expirydate":-62135596800,"fuzzywordcount":1200,"html":"年龄歧视是软件开发行业中会面临的职业问题吗?","keywords":null,"kind":"page","lang":"en","lastmod":1520208e3,"objectID":"d8a477cbdb5581e06bbd0f2215592d24","permalink":"https://tanjunchen.github.io/post/2018-03-05-software-engineer-40-age/","publishdate":"2018-03-05T00:00:00Z","readingtime":3,"relpermalink":"/post/2018-03-05-software-engineer-40-age/","section":"post","summary":"年龄歧视是软件开发行业中会面临的职业问题吗? 软件开发是否是一个\u0026quot;死胡同\u0026quot;的工作呢? 我们是否该将自己的职业规划转向管理岗位","tags":["mind"],"title":"40 岁之后，程序员真的就穷途末路了吗？","type":"post","url":"/post/2018-03-05-software-engineer-40-age/","weight":0,"wordcount":1132},{"author":null,"categories":["TECHNOLOGY"],"content":"技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个技术的使用场景，知道这个技术带来的便利性，我们才决定要深入学习。那我们干嘛要学习Linux？Linux 能给我们带来什么价值呢，这样我们的学习才不会麻木?","date":1519862400,"description":"技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个技术的使用场景，知道这个技术带来的便利性，我们才决定要深入学习。那我们干嘛要学习Linux？Linux 能给我们带来什么价值呢，这样我们的学习才不会麻木?","dir":"post/","excerpt_html":"技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个技术的使用场景，知道这个技术带来的便利性，我们才决定要深入学习。那我们干嘛要学习Linux？Linux 能给我们带来什么价值呢，这样我们的学习才不会麻木?","excerpt_text":"技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个技术的使用场景，知道这个技术带来的便利性，我们才决定要深入学习。那我们干嘛要学习Linux？Linux 能给我们带来什么价值呢，这样我们的学习才不会麻木?","expirydate":-62135596800,"fuzzywordcount":2700,"html":"技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个技术的使用场景，知道这个技术带来的便利性，我们才决定要深入学习。那我们干嘛要学习Linux？Linux 能给我们带来什么价值呢，这样我们的学习才不会麻木?","keywords":null,"kind":"page","lang":"en","lastmod":1519862400,"objectID":"11c9f945e48cf4415f8eb611f93c10c9","permalink":"https://tanjunchen.github.io/post/2018-03-01-why-linux-important/","publishdate":"2018-03-01T00:00:00Z","readingtime":6,"relpermalink":"/post/2018-03-01-why-linux-important/","section":"post","summary":"技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个","tags":["linux"],"title":"浅谈为什么要系统学习 Linux！！！","type":"post","url":"/post/2018-03-01-why-linux-important/","weight":0,"wordcount":2682},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"about/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":300,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"8576ec274c98b3831668a172fa632d80","permalink":"https://tanjunchen.github.io/about/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/about/","section":"","summary":"自我介绍 大家好，我是陈谭军，本人Github，目前从事于 AI Infra 相关研发与落地工作。拥有多年分布式系统、机器学习平台及大规模数据处理方面的经验，","tags":null,"title":"","type":"page","url":"/about/","weight":0,"wordcount":215},{"author":null,"categories":null,"content":null,"date":-62135596800,"description":"","dir":"learning/","excerpt_html":null,"excerpt_text":null,"expirydate":-62135596800,"fuzzywordcount":100,"html":null,"keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"26e72a482a8e7ea660fbc7cc9f36dc83","permalink":"https://tanjunchen.github.io/learning/","publishdate":"0001-01-01T00:00:00Z","readingtime":1,"relpermalink":"/learning/","section":"","summary":"日常工作笔记与学习内容 云原生之旅","tags":null,"title":"","type":"page","url":"/learning/","weight":0,"wordcount":16},{"author":null,"categories":null,"content":"Archive of historical posts.","date":-62135596800,"description":"Archive of historical posts.","dir":"archive/","excerpt_html":"Archive of historical posts.","excerpt_text":"Archive of historical posts.","expirydate":-62135596800,"fuzzywordcount":100,"html":"Archive of historical posts.","keywords":null,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"a06e5ce9eca4c3260843078104889780","permalink":"https://tanjunchen.github.io/archive/","publishdate":"0001-01-01T00:00:00Z","readingtime":0,"relpermalink":"/archive/","section":"","summary":"","tags":null,"title":"Posts Archive","type":"archive","url":"/archive/","weight":0,"wordcount":0}]