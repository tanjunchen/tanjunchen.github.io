<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on 漫步远方，心荡神往</title><link>https://tanjunchen.github.io/tags/kubernetes/</link><description>Recent content in kubernetes on 漫步远方，心荡神往</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>陈谭军</copyright><lastBuildDate>Sat, 11 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://tanjunchen.github.io/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>pwru: 一款基于 eBPF 的细粒度网络数据包排查工具</title><link>https://tanjunchen.github.io/post/2023-11-11-ebpf-pwru/</link><pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-11-11-ebpf-pwru/</guid><description>介绍 Linux 中的网络是个很复杂的问题！！！我们常常会遇见以下问题。 网络命名空间（network）使网络变得更加复杂； 当一个数据包丢失时，作为网络工</description></item><item><title>eBPF 周边生态圈明星产品</title><link>https://tanjunchen.github.io/post/2023-11-04-ebpf-ecosystem/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-11-04-ebpf-ecosystem/</guid><description>主要项目 BCC https://github.com/iovisor/bcc，BCC是一个基于eBPF构建的用于创建高效内核跟踪和程序操作的工具包</description></item><item><title>使用 Pixie 实现 Kubernetes 服务可观测性（4）</title><link>https://tanjunchen.github.io/post/2023-10-21-introduce-pixie/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-10-21-introduce-pixie/</guid><description>bpftrace bpftrace 是 Linux eBPF 的高级跟踪语言。 它的语言受到 awk 和 C 以及其他跟踪器（例如 DTrace 和 SystemTap）的启发。bpftrace 开发语言是 shell，支持 x</description></item><item><title>使用 Hubble 实现 Kubernetes 服务可观测性（3）</title><link>https://tanjunchen.github.io/post/2023-10-14-cilium-hubble/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-10-14-cilium-hubble/</guid><description>介绍 Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流</description></item><item><title>使用 coroot 实现 Kubernetes 服务可观测性（2）</title><link>https://tanjunchen.github.io/post/2023-10-05-ebpf-coroot/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-10-05-ebpf-coroot/</guid><description>核心实现思路： coroot 使用数据库 SQLite（生产环境 Click House）+ Prometheus + Opentelemetry 去做应用（网络、IO、磁盘、文件等）可视化。 coroot-node-agent 使用 eBPF（trace</description></item><item><title>深入研究 Kubernetes 集群中的 Service 通信机制</title><link>https://tanjunchen.github.io/post/2023-09-16-kubernetes-service/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-09-16-kubernetes-service/</guid><description>我们将应用程序部署到 Kubernetes 集群时，比较重要的一步是创建 Service，它允许集群内的应用程序或外部客户端通过 Service 访问。 Kubernetes 中的服务是一种简单的抽象，</description></item><item><title>Cilium Mesh 常见场景与示例</title><link>https://tanjunchen.github.io/post/2023-08-12-cilium-mesh-example/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-08-12-cilium-mesh-example/</guid><description>Cilium 官方版本给出的 Service Mesh 全景图，不同于其它 Service Mesh 开源项目设计了很多 CRD 概念，Cilium Service Mesh 当前专注实现了 mesh data plane，通过开放、包容的设计，能够</description></item><item><title>使用 caretta 实现 Kubernetes 服务可观测性（1）</title><link>https://tanjunchen.github.io/post/2023-06-25-caretta-ebpf/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-06-25-caretta-ebpf/</guid><description>前言 为啥 eBPF 卸载之后，使用 bpftool 还能看到相关 map、prog 等？具体可以参考文章。 介绍 Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络</description></item><item><title>深入理解 Cilium 核心原理</title><link>https://tanjunchen.github.io/post/2023-05-01-cilium-learn/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-05-01-cilium-learn/</guid><description>背景 传统的基于二层转发（Linux bridge、Netfilter/iptables、OVS 等）和/或三层路由的网络虚拟化方案中，数据包的转</description></item><item><title>译文：Cilium Mesh - Mesh 连接所有应用</title><link>https://tanjunchen.github.io/post/2023-04-20-cilium-mesh-one-mesh/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-04-20-cilium-mesh-one-mesh/</guid><description>我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，</description></item><item><title>简介 eBPF 常见跟踪点类型</title><link>https://tanjunchen.github.io/post/2023-04-05-ebpf-category/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-04-05-ebpf-category/</guid><description>通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socke</description></item><item><title>简单了解与学习 eBPF</title><link>https://tanjunchen.github.io/post/2023-04-01-ebpf-introduce/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-04-01-ebpf-introduce/</guid><description>什么是 eBPF？ eBPF 是一项革命性的技术，起源于 Linux 内核，可以在操作系统内核等特权上下文中运行沙盒程序。它用于安全有效地扩展内核的功能，而无需更改</description></item><item><title>在云原生实践与探索道路上遇到的常见问题与解决方法 - 常见脚本（一）</title><link>https://tanjunchen.github.io/post/2023-01-15-cloud-native-question-1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-01-15-cloud-native-question-1/</guid><description>云原生时代是指企业和开发者开始广泛采用云原生技术的时期。云原生技术是一种软件开发方法，它鼓励将应用作为小型、独立的服务来构建和部署，这些服务</description></item><item><title>istio-system 命名空间下的 envoyfilter 有什么作用？</title><link>https://tanjunchen.github.io/post/2022-12-20-istio-envoyfilter/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-12-20-istio-envoyfilter/</guid><description>序言 Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见stats-plugin.cc。Istio 安装时默认会在 istio-system 命名空间下部署 st</description></item><item><title>Cilium 1.12 GA：发布 Cilium Service Mesh 和企业级 Kubernetes 新功能</title><link>https://tanjunchen.github.io/post/2022-12-01-cilium-1.12-release/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-12-01-cilium-1.12-release/</guid><description>前言 随着 Cilium 1.12 新版本发布，Cilium 引入了 Cilium Service Mesh，它是服务网格类型中的新类型，它使企业能够灵活地在 sidecar 模型或无 sidecar 模型中运行服务网格，并可</description></item><item><title>配置 Istio 核心指标监控告警</title><link>https://tanjunchen.github.io/post/2022-11-10-istio-metrics-alert/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-10-istio-metrics-alert/</guid><description>部署 Istio 与周边组件 部署 Istio 参考 getting-started。 部署 Prometheus 参考 Querying Metrics from Prometheus。 部署 Grafana 参考 Visualizing Metrics with Grafana。 原生 Istio Grafana 监控</description></item><item><title>Istio 控制平面与数据平面核心指标</title><link>https://tanjunchen.github.io/post/2022-11-01-istio-metrics/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-01-istio-metrics/</guid><description>部署 Istio 参考 文档 部署 Istio 集群，如下所示： ➜ istio-1.16.5 kubectl -n istio-system get pod NAME READY STATUS RESTARTS AGE istio-eastwestgateway-64fd87c956-8nlpg 1/1 Running 0 29h istiod-66c5ff9789-bsc75 1/1 Running 0 29h 部署 Prometheus 与 Grafana 参考 文档 部署 Prometheus，参考 文档 部署 Gr</description></item><item><title>说道说道 Istio，重新扬帆加入 CNCF</title><link>https://tanjunchen.github.io/post/2022-10-28-istio-history/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-10-28-istio-history/</guid><description>序言 2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目。Istio 扬帆加入 CNCF。</description></item><item><title>Istio 服务网格如何处理安全问题</title><link>https://tanjunchen.github.io/post/2022-02-19-istio-security/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-02-19-istio-security/</guid><description>在这篇博客中，我将解释 Istio 如何解决诸如流量加密、提供灵活的服务访问控制、配置双向 TLS 和细粒度访问策略与审计等问题。 Istio 安全架构 Istio 服务网格发展历史如</description></item><item><title>调度框架 Scheduling Framework</title><link>https://tanjunchen.github.io/post/2021-12-18-scheduling-framework/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-12-18-scheduling-framework/</guid><description>架构设计 相关文档参见 Scheduling Framework。 前提 调度框架定义了一组扩展点，用户可以实现扩展点定义的接口来定义自己的调度逻辑，并将扩展注册到扩展</description></item><item><title>Kubernetes 中数据包的生命周期 Kube-Proxy（Part3）</title><link>https://tanjunchen.github.io/post/2021-10-15-kubernetes-pod-part03/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-10-15-kubernetes-pod-part03/</guid><description>最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。 希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam</description></item><item><title>Kubernetes 中 Pod 生命周期</title><link>https://tanjunchen.github.io/post/2021-10-01-kubernetes-pod-lifecycle/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-10-01-kubernetes-pod-lifecycle/</guid><description>Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在</description></item><item><title>浅谈 Kubernetes</title><link>https://tanjunchen.github.io/post/2020-10-12-talk-about-kubernetes/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-10-12-talk-about-kubernetes/</guid><description>为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步? 6 年前，Docker 横空出世。开发人员愉快地将其从 VM 上运行的应用程序移至 Docker，尽管遇到了</description></item><item><title>初识 kube-proxy（入门篇）</title><link>https://tanjunchen.github.io/post/2020-10-02-kube-proxy-01/</link><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-10-02-kube-proxy-01/</guid><description>摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。 重定向操作由位于每个节点上的 kube-proxy 执行。 在这篇文章中，我们</description></item><item><title>高效通过 Kubernetes CKAD 考试</title><link>https://tanjunchen.github.io/post/2020-03-14-cka-practice/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-03-14-cka-practice/</guid><description>介绍 Kubernetes 是一个开源系统，用于自动化和容器化部署、扩展和管理应用程序。CNCF/Linux 基金会针对 kubernetes 技能的开发人员提供职能考试，考试内容主要包</description></item></channel></rss>