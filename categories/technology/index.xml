<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TECHNOLOGY on 漫步远方，心荡神往</title><link>https://tanjunchen.github.io/categories/technology/</link><description>Recent content in TECHNOLOGY on 漫步远方，心荡神往</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>陈谭军</copyright><lastBuildDate>Sun, 01 Jun 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://tanjunchen.github.io/categories/technology/index.xml" rel="self" type="application/rss+xml"/><item><title>探索 Transformer 理论与本质</title><link>https://tanjunchen.github.io/post/2025-06-01-transformer-01/</link><pubDate>Sun, 01 Jun 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-06-01-transformer-01/</guid><description>1. 语言模型训练和推理 一般来说，语言模型旨在对于人类语言的内在规律进行建模，从而准确预测词序列中未来（或缺失）词或词元（Token）的概率。根</description></item><item><title>科普开源大模型基础知识</title><link>https://tanjunchen.github.io/post/2025-05-07-llm-01/</link><pubDate>Wed, 07 May 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-05-07-llm-01/</guid><description>Llama 4 北京时间2025年4月6日凌晨，Meta发布了外界期待许久的Llama4系列开源模型，目前它包括 Llama 4 Scout、Llama 4 Maveri</description></item><item><title>DeepSeek 开源周活动</title><link>https://tanjunchen.github.io/post/2025-05-01-deepseek-weekly/</link><pubDate>Thu, 01 May 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-05-01-deepseek-weekly/</guid><description>1. DeepSeek 开源周 DeepSeek 在开源了 DeepSeek-R1 与 DeepSeek-V3 模型权重后，DeepSeek-V3 技术报告 《DeepSeek-V3 Technical Report》 中提到的很多核心技术，相继在 &amp;ldquo;DeepSeek 开</description></item><item><title>双机2*H20(8*96GiB)部署满血DeepSeek-R1(fp8)验证过程</title><link>https://tanjunchen.github.io/post/2025-04-05-2h20-deepseek-r1-sglang-vllm/</link><pubDate>Sat, 05 Apr 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-04-05-2h20-deepseek-r1-sglang-vllm/</guid><description>环境信息 机器配置 OS：CentOS Linux release 7.6 (Final) Kernel：4.19.0-1.0.0.9 驱动： Driver Version: 535.216.03 CUDA Version: 12.2 GPU：NVIDIA H20 vLLM：htt</description></item><item><title>单机H20(8*96GiB)部署满血DeepSeek-R1(fp8)验证过程</title><link>https://tanjunchen.github.io/post/2025-04-04-h20-deepseek-r1-sglang-vllm/</link><pubDate>Fri, 04 Apr 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-04-04-h20-deepseek-r1-sglang-vllm/</guid><description>环境信息 机器配置 OS：CentOS Linux release 7.6 (Final) Kernel：4.19.0-1.0.0.9 驱动： Driver Version: 535.216.03 CUDA Version: 12.2 GPU：NVIDIA H20 vLLM：htt</description></item><item><title>单台 H20 机器 DeepSeek R1 (FP8)、DeepSeek-R1-Block-INT8 精度测试与性能测试过程</title><link>https://tanjunchen.github.io/post/2025-03-23-h20-deepseek-r1/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-03-23-h20-deepseek-r1/</guid><description>测试目标 测试下 DeepSeek R1（FP8） 使用单台 H20 机器在 aime、math500、gpqa (使用开源工具 evalscope) 数据集下进行精度测试； 给定输入、输出等参数，</description></item><item><title>DeepSeek R1 推理 GPU 资源配置</title><link>https://tanjunchen.github.io/post/2025-03-15-deepseek-r1-gpu-resource/</link><pubDate>Sat, 15 Mar 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-03-15-deepseek-r1-gpu-resource/</guid><description>Deepseek R1 推理资源需求 量化与 FP8 动态转换： 暂不考虑量化技术； FP8 动态转换因性能损失较大，不推荐使用。因此，默认情况下，不具备 FP8 计算单元的显卡无法运行 FP8</description></item><item><title>LLM 教程（3）- 《DeepSeek R1 论文精读 - 通过强化学习推动大语言模型推理能力的突破与创新》</title><link>https://tanjunchen.github.io/post/2025-03-09-llm-deepseek-r1/</link><pubDate>Sun, 09 Mar 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-03-09-llm-deepseek-r1/</guid><description>1. 序言 下图展示了 OpenAI（公开文献） 从预训练开始逐步训练出一个 GPT 助手的步骤；pre-training -&amp;gt; SFT -&amp;gt; RM -&amp;gt; RL 是典型的大模型训练过程。</description></item><item><title>LLM 教程（2）- 大模型基础知识</title><link>https://tanjunchen.github.io/post/2025-03-08-llm-learn2/</link><pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-03-08-llm-learn2/</guid><description>LLM 专有名词 量化（Quantization） 基础知识 LLM 大模型的量化技术主要是通过对模型参数进行压缩和量化，从而降低模型的存储和计算复杂度。具体</description></item><item><title>LLM 教程（1）- DeepSeek-R1 初步入门</title><link>https://tanjunchen.github.io/post/2025-03-01-llm-learn1/</link><pubDate>Sat, 01 Mar 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-03-01-llm-learn1/</guid><description>基础知识 查看 deepseek-ai 开源官网，DeepSeek 有以下系列： DeepSeek-R1 DeepSeek-V3 （DeepSeek-V3-Base） DeepSeek-VL DeepSeek-Coder DeepSeek-Math DeepSeek-LLM 蒸馏模型系列（Qwen、LLaMA等） &amp;hellip;&amp;hellip;</description></item><item><title>A800 单机8卡体验 DeepSeek-R1-AWQ 量化满血版之旅</title><link>https://tanjunchen.github.io/post/2025-02-23-a800-deepseek-awq/</link><pubDate>Sun, 23 Feb 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-02-23-a800-deepseek-awq/</guid><description>硬件与系统环境要求 硬件配置 GPU: 8× NVIDIA A800 80GB 显存要求: 每卡80GB 系统内存: ≥32GB (用于交换空间) CPU：lscpu | grep &amp;ldquo;Model name&amp;rdquo; 值：Model name: Intel(R)</description></item><item><title>vLLM 多机多卡推理测试与验证（Docker）</title><link>https://tanjunchen.github.io/post/2025-01-19-inference-serve/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-01-19-inference-serve/</guid><description>基础概念 【分布式推理与服务】（Distributed Inference and Serving）是指在多个机器或设备之间部署和管理机器学习模型，以高效地处理推理请求</description></item><item><title>vLLM 多机多卡推理测试与验证（Kubernetes）</title><link>https://tanjunchen.github.io/post/2025-01-19-inference-serve-k8s/</link><pubDate>Sun, 19 Jan 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-01-19-inference-serve-k8s/</guid><description>基础概念 【分布式推理与服务】（Distributed Inference and Serving）是指在多个机器或设备之间部署和管理机器学习模型，以高效地处理推理请求</description></item><item><title>云原生 AI 能力引擎（大模型 AI 基础套件）</title><link>https://tanjunchen.github.io/post/2025-01-05-ai-infra/</link><pubDate>Sun, 05 Jan 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-01-05-ai-infra/</guid><description>本文详尽列举了构建和实施先进人工智能（AI）解决方案所需的关键技术组件。 首先，针对单机环境，文档罗列了并行计算平台、GPU驱动程序、容器化工</description></item><item><title>2025 新年快乐（Happy New Year）</title><link>https://tanjunchen.github.io/post/2025-01-01-happy-new-year/</link><pubDate>Wed, 01 Jan 2025 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2025-01-01-happy-new-year/</guid><description>新年的钟声已经敲响，我们迎来了崭新的 2025年！🎉 感谢过去一年里大家的陪伴与支持，新的一年，愿我们一起迎接更多美好的时刻。🌟 祝愿大家在 2025 年 ✨</description></item><item><title>监测 Linux 内存缺页中断事件</title><link>https://tanjunchen.github.io/post/2024-05-02-linux-page-fault/</link><pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-05-02-linux-page-fault/</guid><description>内存缺页中断概念 内存缺页中断（page fault）是一种由于程序试图访问的内存页不在物理内存中而产生的一种中断。这通常发生在以下几种情况： 内</description></item><item><title>监测 Linux 内核内存 OOM 事件</title><link>https://tanjunchen.github.io/post/2024-05-01-linux-oom/</link><pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-05-01-linux-oom/</guid><description>内存 OOM Linux内核有个机制叫OOMkiller（Out-Of-Memory killer），该机制会监控那些占用内存过大，尤其是瞬间很快消耗</description></item><item><title>深入理解 Kubernetes Scheduler Framework 调度框架（Part 4）</title><link>https://tanjunchen.github.io/post/2024-04-09-scheduler-framework-04/</link><pubDate>Tue, 09 Apr 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-04-09-scheduler-framework-04/</guid><description>Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实</description></item><item><title>深入理解 Kubernetes Scheduler Framework 调度框架（Part 3）</title><link>https://tanjunchen.github.io/post/2024-04-08-scheduler-framework-03/</link><pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-04-08-scheduler-framework-03/</guid><description>Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实</description></item><item><title>深入理解 Kubernetes Scheduler Framework 调度框架（Part 2）</title><link>https://tanjunchen.github.io/post/2024-04-07-scheduler-framework-02/</link><pubDate>Sun, 07 Apr 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-04-07-scheduler-framework-02/</guid><description>Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实</description></item><item><title>深入理解 Kubernetes Scheduler Framework 调度框架（Part 1）</title><link>https://tanjunchen.github.io/post/2024-04-06-scheduler-framework-01/</link><pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-04-06-scheduler-framework-01/</guid><description>Scheduler 分两个 cycle：Scheduling Cycle 和 Binding Cycle。在 Scheduling Cycle 中为了提升效率的一个重要原则就是 Pod、 Node 等信息从本地缓存中获取，而具体的实</description></item><item><title>Sidecar 在 Istio 大规模场景下性能测试</title><link>https://tanjunchen.github.io/post/2024-03-09-istio-sidecar-performance-test/</link><pubDate>Sat, 09 Mar 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-03-09-istio-sidecar-performance-test/</guid><description>背景 Istio XDS 全量下发在大规模场景下存在性能问题。 Istio 全量下发配置会导致数据面/控制面出现性能瓶颈； 全量下发造成数据面 Envoy 配置庞大，Envoy 内存使用</description></item><item><title>Kubernetes CoreDNS 核心原理和源码解析</title><link>https://tanjunchen.github.io/post/2024-01-09-kubernetes-coredns/</link><pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2024-01-09-kubernetes-coredns/</guid><description>K8S 中的 DNS 解析原理 示例如下所示： ➜ tanjunchen_blog (main) kubectl exec -it nginx-0 bash ✱ kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead. root@nginx-0:/# cat /etc/resolv.conf search default.svc.cluster.local svc.cluster.local cluster.local nameserver 10.22.0.10 options ndots:5 root@nginx-0:/# exit exit ➜ tanjunchen_blog (main) kubectl -n kube-system get svc kube-dns ✱ NAME</description></item><item><title>eBPF 探索 Linux 可观测性、网络、安全、性能</title><link>https://tanjunchen.github.io/post/2023-12-09-ebpf-share/</link><pubDate>Sat, 09 Dec 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-12-09-ebpf-share/</guid><description>小试牛刀 root@instance-820epr0w:~/tanjunchen# ./helloworld Hello World Hello World ...... root@instance-820epr0w:~/tanjunchen/bpf-developer-tutorial/src/24-hide# ps aux | grep helloworld root 3312792 0.0 0.0 2776 964 pts/0 S+ 20:22 0:00 ./helloworld root 3313669 0.0 0.0 9748 2316 pts/1 S+ 20:22 0:00 grep --color=auto helloworld 问题：如果我不想让别人看到我正在运行的进程，可以如何实现？</description></item><item><title>pwru: 一款基于 eBPF 的细粒度网络数据包排查工具</title><link>https://tanjunchen.github.io/post/2023-11-11-ebpf-pwru/</link><pubDate>Sat, 11 Nov 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-11-11-ebpf-pwru/</guid><description>介绍 Linux 中的网络是个很复杂的问题！！！我们常常会遇见以下问题。 网络命名空间（network）使网络变得更加复杂； 当一个数据包丢失时，作为网络工</description></item><item><title>eBPF 周边生态圈明星产品</title><link>https://tanjunchen.github.io/post/2023-11-04-ebpf-ecosystem/</link><pubDate>Sat, 04 Nov 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-11-04-ebpf-ecosystem/</guid><description>主要项目 BCC https://github.com/iovisor/bcc，BCC是一个基于eBPF构建的用于创建高效内核跟踪和程序操作的工具包</description></item><item><title>使用 Pixie 实现 Kubernetes 服务可观测性（4）</title><link>https://tanjunchen.github.io/post/2023-10-21-introduce-pixie/</link><pubDate>Sat, 21 Oct 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-10-21-introduce-pixie/</guid><description>bpftrace bpftrace 是 Linux eBPF 的高级跟踪语言。 它的语言受到 awk 和 C 以及其他跟踪器（例如 DTrace 和 SystemTap）的启发。bpftrace 开发语言是 shell，支持 x</description></item><item><title>使用 Hubble 实现 Kubernetes 服务可观测性（3）</title><link>https://tanjunchen.github.io/post/2023-10-14-cilium-hubble/</link><pubDate>Sat, 14 Oct 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-10-14-cilium-hubble/</guid><description>介绍 Hubble - 使用 eBPF 的 Kubernetes 的网络、服务和安全可观测性。Hubble 则是 Cilium 的一个子项目，专注于提供网络可观察性。Hubble 可以收集和可视化 Cilium 网络的流</description></item><item><title>使用 coroot 实现 Kubernetes 服务可观测性（2）</title><link>https://tanjunchen.github.io/post/2023-10-05-ebpf-coroot/</link><pubDate>Thu, 05 Oct 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-10-05-ebpf-coroot/</guid><description>核心实现思路： coroot 使用数据库 SQLite（生产环境 Click House）+ Prometheus + Opentelemetry 去做应用（网络、IO、磁盘、文件等）可视化。 coroot-node-agent 使用 eBPF（trace</description></item><item><title>深入研究 Kubernetes 集群中的 Service 通信机制</title><link>https://tanjunchen.github.io/post/2023-09-16-kubernetes-service/</link><pubDate>Sat, 16 Sep 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-09-16-kubernetes-service/</guid><description>我们将应用程序部署到 Kubernetes 集群时，比较重要的一步是创建 Service，它允许集群内的应用程序或外部客户端通过 Service 访问。 Kubernetes 中的服务是一种简单的抽象，</description></item><item><title>初识 Istio Ambient Mesh 新模式</title><link>https://tanjunchen.github.io/post/2023-09-02-ambient-mesh-learn-first/</link><pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-09-02-ambient-mesh-learn-first/</guid><description>Ambient Mesh，这是 Istio 提供的一种新的数据平面模式，旨在简化操作，提供更广泛的应用兼容性，并降低基础设施的成本。Ambient mesh 使得用户可以选择使</description></item><item><title>浅析 Cilium 与 iptables</title><link>https://tanjunchen.github.io/post/2023-08-19-cilium-iptables/</link><pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-08-19-cilium-iptables/</guid><description>目的 浅析 Cilium 为什么仍然使用 iptables。 前言 似乎大家都不太喜欢 iptables，Cilium 好像也是一样的。使用了 Cilium 一段时间，对于 Cilium 使用 eBPF</description></item><item><title>Cilium Mesh 常见场景与示例</title><link>https://tanjunchen.github.io/post/2023-08-12-cilium-mesh-example/</link><pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-08-12-cilium-mesh-example/</guid><description>Cilium 官方版本给出的 Service Mesh 全景图，不同于其它 Service Mesh 开源项目设计了很多 CRD 概念，Cilium Service Mesh 当前专注实现了 mesh data plane，通过开放、包容的设计，能够</description></item><item><title>Linux 是如何处理网络数据包？</title><link>https://tanjunchen.github.io/post/2023-07-25-network-package/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-07-25-network-package/</guid><description>当网络数据包到达网卡时，数据包从网卡是如何到 Linux（以内核4.19举例） 网络协议栈？先回顾 OSI 七层模型与 TCP/IP 五层模型，如下所示： TCP/IP 应用层数据</description></item><item><title>使用 caretta 实现 Kubernetes 服务可观测性（1）</title><link>https://tanjunchen.github.io/post/2023-06-25-caretta-ebpf/</link><pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-06-25-caretta-ebpf/</guid><description>前言 为啥 eBPF 卸载之后，使用 bpftool 还能看到相关 map、prog 等？具体可以参考文章。 介绍 Caretta 是一种轻量级的独立工具，快速展示集群中运行的服务可视化网络</description></item><item><title>深入理解 Cilium 核心原理</title><link>https://tanjunchen.github.io/post/2023-05-01-cilium-learn/</link><pubDate>Mon, 01 May 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-05-01-cilium-learn/</guid><description>背景 传统的基于二层转发（Linux bridge、Netfilter/iptables、OVS 等）和/或三层路由的网络虚拟化方案中，数据包的转</description></item><item><title>译文：Cilium Mesh - Mesh 连接所有应用</title><link>https://tanjunchen.github.io/post/2023-04-20-cilium-mesh-one-mesh/</link><pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-04-20-cilium-mesh-one-mesh/</guid><description>我们有令人兴奋的消息要和大家分享。由于其先进的安全性、性能和卓越的可扩展性，Cilium 已迅速成为 Kubernetes 容器网络的标准。随着 Cilium 的使用率不断提高，</description></item><item><title>简介 eBPF 常见跟踪点类型</title><link>https://tanjunchen.github.io/post/2023-04-05-ebpf-category/</link><pubDate>Wed, 05 Apr 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-04-05-ebpf-category/</guid><description>通过 eBPF 可以对多种类型的事件进行跟踪，例如 kprobe、kretprobe、tracepoint、uprobe、uretprobe、socke</description></item><item><title>简单了解与学习 eBPF</title><link>https://tanjunchen.github.io/post/2023-04-01-ebpf-introduce/</link><pubDate>Sat, 01 Apr 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-04-01-ebpf-introduce/</guid><description>什么是 eBPF？ eBPF 是一项革命性的技术，起源于 Linux 内核，可以在操作系统内核等特权上下文中运行沙盒程序。它用于安全有效地扩展内核的功能，而无需更改</description></item><item><title>演讲：Service Mesh 在百度大规模生产落地与实践</title><link>https://tanjunchen.github.io/post/2023-03-17-archsummit-servicemesh/</link><pubDate>Fri, 17 Mar 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-03-17-archsummit-servicemesh/</guid><description>调查 没有使用 Kubernetes 管理业务应用？ 没有使用 Service Mesh 进行服务治理？ 主要是做一个小调查，在生产环境没有使用 Kubernetes 进行容器应用编排，没有使用 Service Mesh 进行服务流量治理</description></item><item><title>在云原生实践与探索道路上遇到的常见问题与解决方法 - 常见脚本（一）</title><link>https://tanjunchen.github.io/post/2023-01-15-cloud-native-question-1/</link><pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-01-15-cloud-native-question-1/</guid><description>云原生时代是指企业和开发者开始广泛采用云原生技术的时期。云原生技术是一种软件开发方法，它鼓励将应用作为小型、独立的服务来构建和部署，这些服务</description></item><item><title>程序员技术：探索创新的编码之道</title><link>https://tanjunchen.github.io/post/2023-01-01-chatgpt-article/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2023-01-01-chatgpt-article/</guid><description>背景 在当今数字化时代，程序员技术成为推动科技和社会进步的重要力量。无论是移动应用、网站开发、人工智能还是物联网，程序员技术都扮演着关键角色。</description></item><item><title>istio-system 命名空间下的 envoyfilter 有什么作用？</title><link>https://tanjunchen.github.io/post/2022-12-20-istio-envoyfilter/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-12-20-istio-envoyfilter/</guid><description>序言 Istio 在自己的定制版本 Envoy 中，加入了 stats-filter 插件，用于计算 Istio 指标。可参见stats-plugin.cc。Istio 安装时默认会在 istio-system 命名空间下部署 st</description></item><item><title>Cilium 1.12 GA：发布 Cilium Service Mesh 和企业级 Kubernetes 新功能</title><link>https://tanjunchen.github.io/post/2022-12-01-cilium-1.12-release/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-12-01-cilium-1.12-release/</guid><description>前言 随着 Cilium 1.12 新版本发布，Cilium 引入了 Cilium Service Mesh，它是服务网格类型中的新类型，它使企业能够灵活地在 sidecar 模型或无 sidecar 模型中运行服务网格，并可</description></item><item><title>使用 Istio 过程中遇到的常见问题与解决方法（六）</title><link>https://tanjunchen.github.io/post/2022-11-23-istio-questions-6/</link><pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-23-istio-questions-6/</guid><description>服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布</description></item><item><title>使用 Istio 过程中遇到的常见问题与解决方法（五）</title><link>https://tanjunchen.github.io/post/2022-11-22-istio-questions-5/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-22-istio-questions-5/</guid><description>服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布</description></item><item><title>使用 Istio 过程中遇到的常见问题与解决方法（四）</title><link>https://tanjunchen.github.io/post/2022-11-21-istio-questions-4/</link><pubDate>Mon, 21 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-21-istio-questions-4/</guid><description>服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布</description></item><item><title>使用 Istio 过程中遇到的常见问题与解决方法（三）</title><link>https://tanjunchen.github.io/post/2022-11-20-istio-questions-3/</link><pubDate>Sun, 20 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-20-istio-questions-3/</guid><description>服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布</description></item><item><title>使用 Istio 过程中遇到的常见问题与解决方法（二）</title><link>https://tanjunchen.github.io/post/2022-11-19-istio-questions-2/</link><pubDate>Sat, 19 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-19-istio-questions-2/</guid><description>服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布</description></item><item><title>使用 Istio 过程中遇到的常见问题与解决方法（一）</title><link>https://tanjunchen.github.io/post/2022-11-18-istio-questions-1/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-18-istio-questions-1/</guid><description>服务网格为微服务提供了一个服务通信的基础设施层，统一为上层的微服务提供了服务发现、负载均衡、重试、熔断等基础通信功能，以及服务路由、灰度发布</description></item><item><title>配置 Istio 核心指标监控告警</title><link>https://tanjunchen.github.io/post/2022-11-10-istio-metrics-alert/</link><pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-10-istio-metrics-alert/</guid><description>部署 Istio 与周边组件 部署 Istio 参考 getting-started。 部署 Prometheus 参考 Querying Metrics from Prometheus。 部署 Grafana 参考 Visualizing Metrics with Grafana。 原生 Istio Grafana 监控</description></item><item><title>Istio 控制平面与数据平面核心指标</title><link>https://tanjunchen.github.io/post/2022-11-01-istio-metrics/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-11-01-istio-metrics/</guid><description>部署 Istio 参考 文档 部署 Istio 集群，如下所示： ➜ istio-1.16.5 kubectl -n istio-system get pod NAME READY STATUS RESTARTS AGE istio-eastwestgateway-64fd87c956-8nlpg 1/1 Running 0 29h istiod-66c5ff9789-bsc75 1/1 Running 0 29h 部署 Prometheus 与 Grafana 参考 文档 部署 Prometheus，参考 文档 部署 Gr</description></item><item><title>说道说道 Istio，重新扬帆加入 CNCF</title><link>https://tanjunchen.github.io/post/2022-10-28-istio-history/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-10-28-istio-history/</guid><description>序言 2022年9月底，CNCF TOC（技术监督委员会，Technical Oversight Committee ）已经投票接受了 Istio 作为 CNCF 的孵化项目。Istio 扬帆加入 CNCF。</description></item><item><title>Linux 常见故障定位与性能分析操作命令</title><link>https://tanjunchen.github.io/post/2022-10-02-linux-command/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-10-02-linux-command/</guid><description>序言 Linux 命令主要用于系统故障定位和性能分析，包括监控系统运行状态、报告虚拟内存、CPU、网络、磁盘 IO 等各类资源的使用情况，以及查看进程状态、系</description></item><item><title>Istio 中数据包的生命周期 - 下篇</title><link>https://tanjunchen.github.io/post/2022-06-11-istio-packet-02/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-06-11-istio-packet-02/</guid><description>在《Istio 中数据包的生命周期 - 上篇》文章中，我们学习了服务网格和 Istio 相关概念，Istio 提供流量管理、可观察性、安全性等功能。然后，我们深</description></item><item><title>Istio 中数据包的生命周期 - 上篇</title><link>https://tanjunchen.github.io/post/2022-06-01-istio-packet-01/</link><pubDate>Wed, 01 Jun 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-06-01-istio-packet-01/</guid><description>如果你从事系统后端研发相关工作，“服务网格”一词你或许一定听说过。Istio 过往一直被批评为过于复杂，但今天的 Istio 更加简单易用。 在本篇博客中，</description></item><item><title>如何构建多架构多平台 Docker 镜像？</title><link>https://tanjunchen.github.io/post/2022-03-27-multi-architecture/</link><pubDate>Sun, 27 Mar 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-03-27-multi-architecture/</guid><description>前言 在不同操作系统和处理器架构上运行应用是很普遍的需求，因此为不同平台单独构建发布版本是一种常见做法。 当我们用来开发应用的平台与部署的目标平</description></item><item><title>Istio 服务网格如何处理安全问题</title><link>https://tanjunchen.github.io/post/2022-02-19-istio-security/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2022-02-19-istio-security/</guid><description>在这篇博客中，我将解释 Istio 如何解决诸如流量加密、提供灵活的服务访问控制、配置双向 TLS 和细粒度访问策略与审计等问题。 Istio 安全架构 Istio 服务网格发展历史如</description></item><item><title>调度框架 Scheduling Framework</title><link>https://tanjunchen.github.io/post/2021-12-18-scheduling-framework/</link><pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-12-18-scheduling-framework/</guid><description>架构设计 相关文档参见 Scheduling Framework。 前提 调度框架定义了一组扩展点，用户可以实现扩展点定义的接口来定义自己的调度逻辑，并将扩展注册到扩展</description></item><item><title>解析 Apache Log4j 远程代码注入漏洞</title><link>https://tanjunchen.github.io/post/2021-12-12-apache-log4j2-security/</link><pubDate>Sun, 12 Dec 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-12-12-apache-log4j2-security/</guid><description>漏洞说明 2021年12月9日，Apache Log4j2 Java 日志模块存在远程命令执行漏洞可直接控制目标服务器问题，攻击者攻击难度极低。由于 Apache Log4j2 某些功能存在</description></item><item><title>Wasm C++ Filter 拓展 Envoy</title><link>https://tanjunchen.github.io/post/2021-12-04-wasm-envoyfilter/</link><pubDate>Sat, 04 Dec 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-12-04-wasm-envoyfilter/</guid><description>Wasm C++ Filter 这篇博客演示了一个用 C++ 编写的入门 Envoy Wasm Filter，它将返回值注入到 HTTP 响应的 body 中，并且更新与添加 header。 通过该文章完成构建我们的 C++</description></item><item><title>使用 Golang 扩展 Envoy 代理 - WASM 过滤器</title><link>https://tanjunchen.github.io/post/2021-11-28-golang-envoy-wam/</link><pubDate>Sun, 28 Nov 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-11-28-golang-envoy-wam/</guid><description>介绍 Envoy 是一个开源的服务代理，Envoy 专为云原生应用而设计。 Envoy具有很多的特性，如连接池、重试机制、TLS 管理、压缩、健康检查、故障注</description></item><item><title>科普操作系统与芯片那些事儿</title><link>https://tanjunchen.github.io/post/2021-11-22-os-something/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-11-22-os-something/</guid><description>操作系统（operating system，简称OS）是管理计算机硬件与软件资源的计算机程序。操作系统需要处理如管理与配置内存、决定系统资源供</description></item><item><title>Kubernetes 中数据包的生命周期 Ingress 等处理七层流量（Part4）</title><link>https://tanjunchen.github.io/post/2021-11-05-kubernetes-pod-part04/</link><pubDate>Fri, 05 Nov 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-11-05-kubernetes-pod-part04/</guid><description>最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam</description></item><item><title>Kubernetes 中数据包的生命周期 CNI Calico（Part2）</title><link>https://tanjunchen.github.io/post/2021-10-29-kubernetes-pod-part02/</link><pubDate>Fri, 29 Oct 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-10-29-kubernetes-pod-part02/</guid><description>最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam</description></item><item><title>Kubernetes 中数据包的生命周期 网络基础知识（Part1）</title><link>https://tanjunchen.github.io/post/2021-10-22-kubernetes-pod-part01/</link><pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-10-22-kubernetes-pod-part01/</guid><description>最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam</description></item><item><title>Kubernetes 中数据包的生命周期 Kube-Proxy（Part3）</title><link>https://tanjunchen.github.io/post/2021-10-15-kubernetes-pod-part03/</link><pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-10-15-kubernetes-pod-part03/</guid><description>最近在深入学习 Kubernetes 基础知识，通过追踪 HTTP 请求到达 Kubernetes 集群上的服务过程来深入学习 Kubernetes 实现原理。希望下列文章能够对我们熟悉 Kubernetes 有一定的帮助。 Linux 网络、Nam</description></item><item><title>Kubernetes 中 Pod 生命周期</title><link>https://tanjunchen.github.io/post/2021-10-01-kubernetes-pod-lifecycle/</link><pubDate>Fri, 01 Oct 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-10-01-kubernetes-pod-lifecycle/</guid><description>Pod 是 Kubernetes 集群中可以调度的最小工作单位。Pod 封装了应用程序容器、存储资源、唯一的网络 IP 和决定容器应如何运行的选项。理想情况下，Pod 并不直接在</description></item><item><title>istio 1.9.0 解读报告 - day2 操作</title><link>https://tanjunchen.github.io/post/2021-07-01-istio-1.9/</link><pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-07-01-istio-1.9/</guid><description>1.9.0 的重点在于改善用户在生产中运行Istio的day 2操作，改善用户使用istio的稳定性，确保Istio核心API与功能的稳定，使用户放心与</description></item><item><title>使用 wasm 拓展 istio-proxy 数据面</title><link>https://tanjunchen.github.io/post/2021-05-01-istio-solo-io-wasm/</link><pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2021-05-01-istio-solo-io-wasm/</guid><description>Solo.io 团队发布了 WebAssembly Hub，这是一套为 Envoy 和 Istio 准备的，用于构建、部署、共享和发现 Envoy Proxy WASM 扩展的工具和仓库。 使用 wasme 拓展 istio-proxy 数据平面 安装 wasme 构建工具 curl -sL https://run.solo.io/wasme/install | sh</description></item><item><title>istio 1.8.0 支持 VM 虚拟机验证</title><link>https://tanjunchen.github.io/post/2020-11-30-istio-support-vm/</link><pubDate>Mon, 30 Nov 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-11-30-istio-support-vm/</guid><description>环境 K8s 版本：1.17.2 Istio 版本：1.8.0 CentOS 版本：8.0（要求Glibc大于等于 2.18） 查看机器的 glibc 版本： ldd --version ldd (GNU libc) 2.18 Copyright (C) 2013 Free Software Foundation, Inc. This is free</description></item><item><title>istio 1.8.0 解读报告 - 用户至上</title><link>https://tanjunchen.github.io/post/2020-11-19-istio-1.8/</link><pubDate>Thu, 19 Nov 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-11-19-istio-1.8/</guid><description>备注：Istio 1.8.0 支持的 Kubernetes 版本是 1.16、1.17、1.18 和 1.19(从 Istio 1.7 开始仅支持 Kubernetes 1.16+ 版本)。 Istio 1.8 解读 - 用户至上 安装与升级 Istio 1.8 开始使用</description></item><item><title>浅谈 Kubernetes</title><link>https://tanjunchen.github.io/post/2020-10-12-talk-about-kubernetes/</link><pubDate>Mon, 12 Oct 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-10-12-talk-about-kubernetes/</guid><description>为什么 Kubernetes 是软件产品研发中迈出的跨越性的一步? 6 年前，Docker 横空出世。开发人员愉快地将其从 VM 上运行的应用程序移至 Docker，尽管遇到了</description></item><item><title>如何参与 Kubernetes 开源社区</title><link>https://tanjunchen.github.io/post/2020-10-06-participate-community/</link><pubDate>Tue, 06 Oct 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-10-06-participate-community/</guid><description>介绍 【百度百科】开源社区又称开放源代码社区，一般由拥有共同兴趣爱好的人所组成，根据相应的开源软件许可证协议公布软件源代码的网络平台，同时也为</description></item><item><title>初识 kube-proxy（入门篇）</title><link>https://tanjunchen.github.io/post/2020-10-02-kube-proxy-01/</link><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-10-02-kube-proxy-01/</guid><description>摘要：在 Kubernetes 中，Service 是一个 L4(TCP/UDP/SCTP) 负载均衡器，它使用 DNAT 将入站流量重定向到后端 Pod。 重定向操作由位于每个节点上的 kube-proxy 执行。 在这篇文章中，我们</description></item><item><title>编译与构建 istio-1.6.14 镜像</title><link>https://tanjunchen.github.io/post/2020-05-01-istio-1.6-compile/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-05-01-istio-1.6-compile/</guid><description>根据 istio 文档 可知，编译 istio 源码分为两种方式，一种是直接在 linux 机器上编译源码，另外一种是通过 docker 镜像工具包编译与构建。 编译 istio 1.6.14 centos 7 rpm 依赖包 istio 1.6.x 系列版本</description></item><item><title>高效通过 Kubernetes CKAD 考试</title><link>https://tanjunchen.github.io/post/2020-03-14-cka-practice/</link><pubDate>Sat, 14 Mar 2020 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2020-03-14-cka-practice/</guid><description>介绍 Kubernetes 是一个开源系统，用于自动化和容器化部署、扩展和管理应用程序。CNCF/Linux 基金会针对 kubernetes 技能的开发人员提供职能考试，考试内容主要包</description></item><item><title>浅析 Java JVM</title><link>https://tanjunchen.github.io/post/2019-08-18-java-jvm/</link><pubDate>Sun, 18 Aug 2019 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2019-08-18-java-jvm/</guid><description>俗话说得好，工欲善其事必先利其器，对于Java开发者来说，简单了解Java虚拟机某些特性有益于提升开发者的内功。为什么我们在编写Java代码</description></item><item><title>Python 抓取 Flex (Flash) 技术数据传输</title><link>https://tanjunchen.github.io/post/2018-09-21-python-flex-flash/</link><pubDate>Fri, 21 Sep 2018 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2018-09-21-python-flex-flash/</guid><description>最近发现了一个网站中国农业信息网，他有个数据请求是以 amf 的方式请求数据，以前没有遇到过。所以网上了解一下，找到了python 中的第三方包 pya</description></item><item><title>Python 揭秘北京房租</title><link>https://tanjunchen.github.io/post/2018-09-01-python-bj-house-price/</link><pubDate>Sat, 01 Sep 2018 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2018-09-01-python-bj-house-price/</guid><description>前一段时间刚接触 Python，为了学习 Python 基础语法，我使用 Python 爬取了北京的网站租房信息，一周前北京的出租房屋还有将近 1.4 万套，然而最近一两天重新爬</description></item><item><title>初识 Spring Boot</title><link>https://tanjunchen.github.io/post/2018-08-19-springboot/</link><pubDate>Sun, 19 Aug 2018 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2018-08-19-springboot/</guid><description>最近接触到 Spring Boot，让我们一起探讨这个很火的家伙吧！！！ 什么是 Spring Boot? Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化 Spring 应用的初始搭建以及开</description></item><item><title>初步浅析 Git 教程</title><link>https://tanjunchen.github.io/post/2018-08-01-git-learn/</link><pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2018-08-01-git-learn/</guid><description>Git 概念 Git 是目前世界上最先进的分布式版本控制系统，版本控制系统主要分为：CVS(集中式的版本控制系统)、SVN(集中式版本控制系统)、BitK</description></item><item><title>浅谈为什么要系统学习 Linux！！！</title><link>https://tanjunchen.github.io/post/2018-03-01-why-linux-important/</link><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><guid>https://tanjunchen.github.io/post/2018-03-01-why-linux-important/</guid><description>技术的价值不在于这个技术有多么高超，而在于技术本身给我们带来什么价值，所以很多时候我们学习一个技术，不能盲目学，是为了使用这个技术，知道这个</description></item></channel></rss>